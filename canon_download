#!/usr/bin/python2.6 -3
# canon_download Copyright (C) 2012 Stuart Pook (http://www.pook.it/)
# Download from a Canon or GoPro camera the photos that have not already been seen.
# https://github.com/alexdu/piggyphoto/blob/master/piggyphoto
# http://magiclantern.wikia.com/wiki/Remote_control_with_PTP_and_Python
# http://pysnippet.blogspot.fr/2009/12/when-ctypes-comes-to-rescue.html
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
from __future__ import print_function
import piggyphoto
import optparse
import sys
import os
import tempfile, filecmp
import errno
import re
import collections

def myname():
	return os.path.basename(sys.argv[0])

def verbose(options, *args):
	if options.verbose:
		print(*args)

def quiet(options, *args):
	if not options.quiet:
		print(*args)

def error(options, *args):
	print(myname() + ":", *args, file=sys.stderr)
	sys.exit(56)

def read_record(options):
	records = [line.strip() for line in open(options.record)]
	if options.verbose:
		print(len(records), "records in", options.record)
	return records

def get_files(camera, where, dir_prefix, mappings, seen, found, options):
	result = []
	verbose(options, "looking for files in", where,  dir_prefix)
	for f, junk in camera.list_files(where):
		for m in mappings:
			match = re.match(m.oldname, f, re.I)

			if match:
				if m.newname:
					dest_base = dir_prefix + match.expand(m.newname).lower()
				else:
					dest_base = None
					verbose(options, "skipping as dest None", where)
				break
		else:
			error(options, "unknown filename", f, "in", where)

		if dest_base:
			if not dest_base in seen:
				found.append(dest_base)

			dest = os.path.join(options.destination, dest_base)

			if os.path.lexists(dest):
				if options.check:
					result.append([where, f, dest, True])
				else:
					verbose(options, "skipping existing", dest_base)
			else:
				if dest_base in seen:
					verbose(options, "skipping seen", dest_base)
				else:
					result.append([where, f, dest, False])

	return result

def look_for_directories(camera, where, seen, found, options):
	FileMapping = collections.namedtuple("FileMapping", "oldname newname")
	CameraInfo = collections.namedtuple("CameraInfo", "insuffix outsuffix skip mappings")
	maps = [
		CameraInfo("100ANDRO", "xx", True, [
			FileMapping(r".*", None),
		]),
		CameraInfo(".thumbnails", "xx", True, [
			FileMapping(r".*", None),
		]),
		CameraInfo("Camera", "s", False, [
			FileMapping(r"(?:IMG)_([0-9]{8})_([0-9]{6})\.jpg", r"\1_\2.jpg"),
		]),
		CameraInfo("CANON", "c", False, [
			FileMapping(r"(?:MVI|_MG|IMG|MOV)_([0-9]{4})\.(JPG|MOV|CR2)", r"\1.\2"),
		]),
		CameraInfo("GOPRO", "g", False, [
			FileMapping(r"GOPR([0-9]{4})\.JPG", r"\1.jpg"),
			FileMapping(r"G0([0-9]{6})\.JPG", r"\1.jpg"),
			FileMapping(r"GOPR([0-9]{4})\.mp4", r"\g<1>00.mp4"), # add 00 to sort in correct order with continuation files
			FileMapping(r"GP([0-9]{2})([0-9]{4})\.mp4", r"\2\1.mp4"),
		]),
	]
	verbose(options, "look_for_directories in", where)
	jobs = []
	for d, junk in camera.list_folders(where):
		nd = os.path.join(where, d)
		verbose(options, "look_for_directories", where, d, nd)
		suffix = options.remote
		for m in maps:
			if d.endswith(m.insuffix):
				if not m.skip:
					jobs.extend(get_files(camera, nd, m.outsuffix + d[:-len(m.insuffix)], m.mappings, seen, found, options))
					verbose(options, "have a match on", d, "with", m)
				break
		else:
			error(options, "unknown dir", nd)
	return jobs

def look_for_dcim(camera, where, seen, found, options):
	verbose(options, "look_for_dcim in", where)
	jobs = []
	for d, junk in camera.list_folders(where):
		nd = os.path.join(where, d)
		verbose(options, "look_for_dcim in", where, d, nd)
		if d == options.remote:
			jobs.extend(look_for_directories(camera, nd, seen, found, options))
		else:
			jobs.extend(look_for_dcim(camera, nd, seen, found, options))
		if jobs:
			return jobs
	return jobs

def download(jobs, camera, options):
	quiet(options, "download:", len(jobs), "files to download or check")
	if not options.dryrun:
		i = 0
		for where, f, dest, check in jobs:
			i += 1
			quiet(options, "check" if check else "download", "%3.0f%%" % (100.0 * i / len(jobs)), dest)
			if check:
				with tempfile.NamedTemporaryFile(delete = True) as tmp:
					camera.download_file(where, f, tmp.name)
					if not filecmp.cmp(dest, tmp.name):
						print(os.path.basename(sys.argv[0]) + ":", dest, "is different")
			else:
				tmp = dest + ".tmp"
				verbose(options, "downloading", where + "/" + f, "to", tmp)
				camera.download_file(where, f, tmp)
				os.utime(tmp, None)
				with open(tmp) as t:
					os.fsync(t)
				os.rename(tmp, dest)

def run(options, args):
	seen = frozenset(read_record(options))
	verbose(options, "about to open camera")
	camera = piggyphoto.camera()
	verbose(options, "camera open")
	verbose(options, camera.abilities)
	found = []
	jobs = look_for_dcim(camera, "/", seen, found, options)
	verbose(options, "jobs:", jobs)
	download(jobs, camera, options)
	if not options.quiet:
		print(len(found), "new files")
	if not options.dryrun and options.write and len(found) > 0:
		with open(options.record, "a") as record:
			for f in found:
				record.write(f + "\n")

def main():
	parser = optparse.OptionParser(usage="%prog [--help] [options]")
	parser.add_option("-v", "--verbose", action="store_true", default=False, help="verbose")
	parser.add_option("-i", "--interactive", action="store_true", default=False, help="interactive mode")
	parser.add_option("-q", "--quiet", action="store_true", default=False, help="quiet")
	parser.add_option("-n", "--dryrun", action="store_true", default=False, help="don't do the copies")
	parser.add_option("-c", "--check", action="store_true", default=False, help="check (verify) already downloaded files")
	parser.add_option("-w", "--write", action="store_false", default=True, help="don't write record")
	parser.add_option("-r", "--record", metavar="FILE", default=os.path.expanduser("~/var/photos/seen"), help="record file [%default]")
	parser.add_option("-d", "--destination", metavar="DIRECTORY", default="", help="destination directory [%default]")
	parser.add_option("--remote", metavar="DIRECTORY", default="DCIM", help="directory on camera [%default]")
	(options, args) = parser.parse_args()

	if args:
		sys.exit(parser.get_usage())

	if not options.interactive:
		run(options, args)
	else:
		r = 0
		try:
			run(options, args)
		except:
			r = 1
			import traceback
			traceback.print_exc()
			print("ERROR, return to exit")
		else:
			print("OK, return to exit")
		sys.stdin.readline()
		sys.exit(r)

if __name__ == '__main__':
	main()
