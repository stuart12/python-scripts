#!/usr/bin/python2 -3
# buzz_phone Copyright (C) 2018 Stuart Pook (http://www.pook.it/)
# Buzz phone for a few seconds
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


from __future__ import print_function

# https://trac.pjsip.org/repos/wiki/Python_SIP/Calls
# https://trac.pjsip.org/repos/browser/pjproject/trunk/pjsip-apps/src/python/samples/registration.py
import sys
import pjsua as pj
import threading
import time
import argparse

def log_cb(level, str, len):
    print(str,eol="")

class MyAccountCallback(pj.AccountCallback):
    sem = None

    def __init__(self, account):
        pj.AccountCallback.__init__(self, account)

    def wait(self):
        self.sem = threading.Semaphore(0)
        self.sem.acquire()

    def on_reg_state(self):
        if self.sem:
            if self.account.info().reg_status >= 200:
                self.sem.release()

# Callback to receive events from Call
class MyCallCallback(pj.CallCallback):
    def __init__(self, lib, ring_time, call=None):
        pj.CallCallback.__init__(self, call)
        self.lib = lib
        self.ring_time = ring_time

    # Notification when call state has changed
    def on_state(self):
        print("Call is", self.call.info().state_text, end=' ')
        print("last code =", self.call.info().last_code, end=' ')
        print("(" + self.call.info().last_reason + ")")
        if  self.call.info().state_text == "EARLY":
            print("sleep", self.ring_time, "to let the phone ring") # hack
            time.sleep(self.ring_time)

    # Notification when call's media state has changed.
    def on_media_state(self):
        if self.call.info().media_state == pj.MediaState.ACTIVE:
            # Connect the call to sound device
            call_slot = self.call.info().conf_slot
            self.lib.conf_connect(call_slot, 0)
            self.lib.conf_connect(0, call_slot)
            print("Hello world, I can talk!")

def ring(user, server, password, number, ring_time):
    lib = pj.Lib()

    try:
        lib.init(log_cfg = pj.LogConfig(level=0, callback=log_cb))
        lib.set_null_snd_dev()
        lib.create_transport(pj.TransportType.UDP, pj.TransportConfig(5080))
        lib.start()

        acc = lib.create_account(pj.AccountConfig(server, user, password))
        acc_cb = MyAccountCallback(acc)
        acc.set_callback(acc_cb)
        acc_cb.wait()

        print("\n")
        print("Registration complete, status=", acc.info().reg_status, \
              "(" + acc.info().reg_reason + ")")
        #print "\nPress ENTER to quit"
        #sys.stdin.readline()
        time.sleep(1)

        call = acc.make_call("sip:%s@%s" % (number, server), MyCallCallback(lib, ring_time))

        time.sleep(ring_time * 2.1)
        lib.destroy()
        lib = None

    except pj.Error, e:
        print("Exception: " + str(e))
        lib.destroy()

def main():
    parser = argparse.ArgumentParser(description='ring a number for few seconds')
    parser.add_argument("--user", help="the user to login as")
    parser.add_argument("--server", help="the SIP server to login to")
    parser.add_argument("--password", help="password for the user on the server")
    parser.add_argument("--number", help="the number to ring")
    parser.add_argument("-t", "--ring_time", type=float, default=8, help="time in seconds to ring")

    args = parser.parse_args()
    ring(args.user, args.server, args.password, args.number, args.ring_time)

if __name__ == '__main__':
    main()
