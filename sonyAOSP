#!/usr/bin/python3 -B
# SonyAOSP Copyright (c) 2018 Stuart Pook (http://www.pook.it/)
# Compile AOSP for my two Sony devices

# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# https://developer.sony.com/develop/open-devices/guides/aosp-build-instructions/build-aosp-nougat-7-1#tutorial-step-5

import sys
import argparse
import time
import logging
import tempfile
import subprocess
import grp
import pwd
import shlex
import os.path

script = """
set -ex
git config --global user.name "Stuart Pool"
git config --global user.email "pool565@free.fr"
curl --silent --show-error --output $HOME/repo http://commondatastorage.googleapis.com/git-repo-downloads/repo
chmod 755 $HOME/repo

# https://developer.sony.com/develop/open-devices/guides/aosp-build-instructions/build-aosp-nougat-7-1#tutorial-step-4

r=android-7.1.1_r55
mkdir -p $r
cd $r
: strace -f -e '!poll,select' 
time $HOME/repo init -u https://android.googlesource.com/platform/manifest -b $r # --depth 1

cd .repo
git clone https://github.com/sonyxperiadev/local_manifests
cd local_manifests
git checkout n-mr1_3.10
cd ../..

$HOME/repo sync
./repo_update.sh
sha256sum -c ../../SW_binaries_for_Xperia_AOSP_M_MR1_3.10_v13_legacy.zip.sha256
unzip ../../SW_binaries_for_Xperia_AOSP_M_MR1_3.10_v13_legacy.zip

device=amami
#echo '$(call inherit-product, external/stuart-google/stuart-google.mk)' >> device/sony/$device/device.mk
packages="GoogleServicesFramework FDroid PrebuiltGmsCore Phonesky"
sed -i -e 's/\(PRODUCT_PACKAGES +=\) /\1'"$packages"' /' build/target/product/core.mk
for i in $packages; do
    ln -sf ../../../../stuart-google/$i/ packages/priv-apps/
done

source build/envsetup.sh && lunch aosp_d5503-userdebug
(cd vendor/qcom/opensource/dataservices && git checkout aa63b64b92d11cc628621b60d78c9a7e8c609201^1)

dpkg -s bison g++-multilib git gperf libxml2-utils make zlib1g-dev:i386 zip liblz4-tool > /dev/null

LC_ALL=C ionice nice make -j 4

source build/envsetup.sh && lunch aosp_sgp611-userdebug
LC_ALL=C ionice nice make -j 4

cat << Eof
fastboot flash boot $r/out/target/product/$device/boot.img
fastboot flash recovery $r/out/target/product/$device/recovery.img
fastboot flash system $r/out/target/product/$device/system.img
fastboot flash userdata $r/out/target/product/$device/userdata.img
Eof
"""

def run(build_dir, interactive):
    build_directory = os.path.abspath(build_dir)
    build_stat = os.stat(build_directory)
    user = pwd.getpwuid(os.stat(build_directory).st_uid).pw_name
    with tempfile.TemporaryFile(mode='w+') as shscript:
        shscript.write("/bin/bash -i" if interactive else script)
        shscript.flush()
        shscript.seek(0, 0)
        cmd = [
            "sudo", "systemd-run",
            "--pty" if interactive else "--pipe",
            "-p", "PrivateTmp=true",
            "-p", "PrivateUsers=true",
            "-p", "ProtectHome=true",
            "--setenv", "HOME=/var/tmp",
            "-p", "WorkingDirectory=" + build_directory,
            "-p", "ReadWritePaths=" + build_directory,
            "-p", "User=" + pwd.getpwuid(build_stat.st_uid).pw_name,
            "-p", "Group=" + grp.getgrgid(build_stat.st_gid).gr_name,
            #"-p", "InaccessiblePaths=/boot " + os.path.expanduser("~"),
            "-p", "DevicePolicy=closed",
            "-p", "CapabilityBoundingSet=",
            "-p", "NoNewPrivileges=true",
            "-p", "PrivateDevices=true",
            "-p", "ProtectControlGroups=true",
            "-p", "ProtectKernelModules=true",
            "-p", "ProtectKernelTunables=true",
            "-p", "ProtectSystem=strict",
            "-p", "RestrictAddressFamilies=AF_UNIX AF_INET AF_INET6",
            "-p", "RestrictRealtime=true",
            "-p", "RestrictNamespaces=true",
            "-p", "LockPersonality=true",
            "-p", "RemoveIPC=true",
            "-p", "MemoryDenyWriteExecute=false",
            "-p", "IPAddressDeny=localhost",
            "-p", "IPAccounting=true",
            "/bin/bash", "-i" if interactive else "-xe"]
        logging.debug("cmd is %s", " ".join(shlex.quote(c) for c in cmd))
        subprocess.call(cmd, stdin=None if interactive else shscript)


def main():
    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter,
            description="Compile AOSP")

    parser.set_defaults(loglevel='warn')
    parser.add_argument("-v", "--verbose", dest='loglevel', action="store_const", const='debug', help="debug loglevel")
    parser.add_argument("-l", "--loglevel", metavar="LEVEL", help="set logging level")
    #parser.add_argument("--delay", metavar="SECONDS", type=float, default=59, help="time between reads")
    #parser.add_argument("-a", "--address", type=lambda x: int(x, 0), metavar="ADDRESS", help="IC2 bus address")
    parser.add_argument("-i", "--interactive", action="store_true", help="interactive shell")
    parser.add_argument("-b", "--build", default=os.getcwd(), help="directory to build in")

    options = parser.parse_args()

    numeric_level = getattr(logging, options.loglevel.upper(), None)
    if not isinstance(numeric_level, int):
        sys.exit('Invalid log level: %s' % options.loglevel)
    logging.basicConfig(level=numeric_level)

    run(options.build, options.interactive)

if __name__ == "__main__":
    main()
