#!/usr/bin/python3
# lockscreen4bed Copyright (c) 2016 Stuart Pook (http://www.pook.it/)
# Lock the screen every 15 minutes when it is time to go to bed.
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
import argparse
import sys
import os
import subprocess
import shlex

def myname():
    return os.path.basename(sys.argv[0])

try:
    from apscheduler.schedulers.blocking import BlockingScheduler
except ImportError as x:
    sys.exit(myname() + ": apscheduler not installed, on Debian do: sudo apt-get install python3-apscheduler")

def verbose(options, level, *message):
    if options.verbosity >= level:
        print(myname() + ":", *message, file=sys.stderr)

def quote_command(command):
    return " ".join(shlex.quote(x) for x in command)

def call(cmd, options=None):
    verbose(options, 1, quote_command(cmd))
    subprocess.check_call(cmd)

def doit(options=None):
    if options.gnome:
        call(["xset", "dpms", "force", "off"], options=options)
        call(["gnome-screensaver-command", "--lock"], options=options)
    else:
        call(["light-locker-command", "--lock"], options=options)

def main():
    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter,
            description="send me to bed")

    parser.add_argument("-v", "--verbosity", action="count", default=0, help="increase output verbosity")
    #parser.add_argument("--min_play_time", metavar="SECONDS", type=int, default=9, help="minimum")
    parser.add_argument("-m", "--minutes", metavar="MINUTES", default="14,29,44,59", help="minutes in cron format")
    parser.add_argument("-H", "--hours", metavar="HOURS", default="0-4,22-23", help="hours in cron format")
    parser.add_argument('-g', "--gnome", action="store_true", help="use GNOME lock commands")
    #parser.add_argument("--loop", action="store_true", help="play all podcasts")

    parser.add_argument('urls', nargs=argparse.REMAINDER, help='urls to (permanently) add to the play list')

    options = parser.parse_args()

    cron = BlockingScheduler()
    cron.add_job(doit, kwargs={'options': options}, trigger='cron', hour=options.hours, minute=options.minutes)
    cron.start()

if __name__ == "__main__":
    main()
