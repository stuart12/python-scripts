#!/usr/bin/python3
# photo-directory-archive, Copyright (C) 2013 Stuart Pook (http://www.pook.it/)
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os, optparse, sys, errno, subprocess
import hashlib
import tempfile
import time

def myname():
	return os.path.basename(sys.argv[0])
	
def fatal(*args):
	print(myname() + ": fatal:", *args, file=sys.stderr)
	sys.exit(5)

def get_best_snapshot_with_album(album, snapshots, options):
	best_set = frozenset()
	best_snapshot = None
	for snapshot in snapshots:
		dir = os.path.join(options.snapshots, snapshot, album)
		try:
			files = os.listdir(dir)
		except OSError as e:
			if e.errno != errno.ENOENT:
				raise
			continue
		cr3 = frozenset([i for i in files if i.endswith(options.photo_suffix)])
		if cr3 > best_set:
			best_set = cr3
			best_snapshot = snapshot
		elif not cr3 <= best_set:
			sys.error("%s: for album %s snapshot %s has gained (%s) and lost photos from %s: %s" % (myname(), album, snapshot, (cr3 - best_set), best_snapshot, (best_set - cr3)))
	if best_snapshot is None:
		sys.error(myname() + ": no snapshot contained" + album)
	return best_snapshot, best_set

def get_first_snapshot_with_album(album, snapshots, options):
	for snapshot in snapshots:
		dir = os.path.join(options.snapshots, snapshot, album)
		try:
			files = os.listdir(dir)
			if len(files) > 0:
				return snapshot, files
		except OSError as e:
			if e.errno != errno.ENOENT:
				raise
				
	sys.exit(os.path.basename(sys.argv[0]) + ": album '" + album + "' not found in snapshots '" + options.snapshots + "'")
	
def getsize(path, options):
	sz = os.path.getsize(path) 
	r = (sz + options.block_size - 1) // options.block_size
	#print (path, sz, r)
	return r

def do_album(album, snapshots, options):
	snapshot, photos  = get_best_snapshot_with_album(album, snapshots, options)
	
	files = []
	
	for file in photos:
		files.append([album + "/" + file, os.path.join(options.snapshots, snapshot, album, file)])
	
	current_dir = os.path.join(options.photos, album)
	for file in os.listdir(current_dir):
		if file.endswith(options.photo_suffix):
			if not options.force:
				assert file in photos, "photo " + file + " not in snapshot " + snapshot + " for " + album + " " + str(photos)
		elif file.endswith(options.rawtherapee_suffix):
			if not options.force:
				assert file[0:-len(options.rawtherapee_suffix)] + options.photo_suffix in photos, "pp3 " + file + " not in snapshot " + snapshot + " for " + album
			files.append([album + "/" + file, os.path.join(current_dir, file)])

	sz = 0
	for file in files:
		sz += getsize(file[1], options)

	return sz, files
	
def do_md5sum(filenames, tmp, options):
	for name, file in filenames:
		with open(file, "rb") as data:
			m = hashlib.md5()
			while True:
				s = data.read(1024 * 8)
				if not s:
					break
				m.update(s)
			v = "%s *%s" % (m.hexdigest(), name)
			if options.verbose > 1:
				print(v)
			print(v, file=tmp)
			
def line_compare(f1, f2):
	n = 0
	for l1, l2 in zip(f1, f2):
		if l1 != l2:
			fatal("bad file compare", l1.strip(), l2.strip())
		n += 1
	if l1 != l2:
		fatal("bad file compare2")
	return n
	
def main():	
	parser = optparse.OptionParser(usage="%prog [--help] [options] album ...")
	parser.disable_interspersed_args()
	
	parser.add_option("-K", "--keep_MD5", action="store_true", help="leave MD5 file in /tmp")
	parser.add_option("-x", "--execute", action="store_true", help="make DVD")
	parser.add_option("-f", "--force", action="store_true", help="don't check that all photos are present")
	parser.add_option("-q", "--quiet", action="store_true", help="no messages")
	parser.add_option("-v", "--verbose", action="count", default=0, help="verbosity")
	parser.add_option("-V", "--volid", help="volume name")
	parser.add_option("-c", "--nocheck", action="store_true", help="do not check")
	parser.add_option("--snapshots", default="/disks/snapshots/photos", help="snapshots [%default]")
	parser.add_option("--photos", default=os.path.expanduser("~/photos"), help="directory containing albums [%default]")
	parser.add_option("--photo_suffix", default=".cr2", help="photo suffix [%default]")
	parser.add_option("--block_size", type='int', default=2048, help="block size for space calculations [%default]")
	parser.add_option("--dvd_size", type='int', help="DVD size for space calculations [%default]")
	parser.add_option("--cdrom", action="store_true", help="burn a CD-ROM ")
	parser.add_option("-2", "--dual_layer", action="store_true", help="dual layer DVD size for space calculations")
	parser.add_option("--rawtherapee_suffix", default=".cr2.pp3", help="rawtherapee suffix [%default]")
	parser.add_option("--command", default="dvdmake", help="command to create a DVD [%default]")
	parser.add_option("--md5sum_name", default="md5sums.txt", help="name of md5sums on DVD [%default]")
	parser.add_option("--mount_point", default="/media/dvd", help="where DVDs are mounted [%default]")
	parser.add_option("--device", default="/dev/dvd", help="DVD device [%default]")
	parser.add_option("--mount_sleep", type='float', default=2, help="wait between mount attempts [%default]")
	parser.add_option("--mount_attempts", type='int', default=9, help="number of mount attempt [%default]")

	(options, args) = parser.parse_args()
	
	if not args:
		parser.error("must have at least on album")
		
	if options.cdrom:
		command = [ "genisoimage", "-quiet", "-J","-R", "-file-mode", "0644", "-dir-mode", "0755", "-new-dir-mode", "0755", "-uid", "0", "-gid", "0"]
		dvd_size = 680 * 1000 * 1000
	else:
		command = [ options.command ]
		if options.dual_layer:
			dvd_size = 8540 * 1000 * 1000
		else:
			dvd_size = 4700 * 1000 * 1000
	if options.dvd_size:
		dvd_size = options.dvd_size

	volid = None
	if len(args) == 1:
		volid = args[0]
	if options.volid:
		volid = options.volid
	if not volid:
		parser.error("must use the --volid option when more than one album")
	
	snapshots = os.listdir(options.snapshots)
	snapshots.sort()

	command.extend([ "-V", volid, "-graft-points" ])
	
	filenames = []
	
	used = 0
	for i in args:
		sz, names = do_album(i, snapshots, options)
		if (used + sz) * options.block_size >= dvd_size:
			if used == 0:
				fatal("no space for first album: " + i)
			if not options.quiet:
				print("no more space for", i)
		else:
			used += sz
			filenames.extend(names)
			if not options.quiet:
				print(i, sz, "sectors", len(names), "files")
		
	for name, file in filenames:
		command.append(name+ "=" + file)
	
	bytes = used * options.block_size
	if not options.quiet:
		print(used, "sectors,", bytes, "bytes,", "%.1f %%" % (bytes * 100 / dvd_size))
		
	if options.execute or options.verbose:
		with tempfile.NamedTemporaryFile(mode='w+', prefix='photo-directory-archive', delete=(not options.keep_MD5)) as md5:
			do_md5sum(filenames, md5, options)
			md5.flush()
			command.append(options.md5sum_name + "=" + md5.name)
			if options.verbose > 0:
				print(command)
			if options.execute:
				if options.cdrom:
					geniso = subprocess.Popen(command, stdout=subprocess.PIPE)
					burner = ["wodim", "-eject", "-tao", "-"]
					if subprocess.Popen(burner, stdin=geniso.stdout).wait():
						fatal(burner[0], "failed")
					if geniso.wait():
						fatal(command[0], "failed")
				else:
					subprocess.check_call(command)
					
				subprocess.check_call(["eject", "-t", options.device])
				for i in range(options.mount_attempts):
					time.sleep(options.mount_sleep)
					if subprocess.call(["pmount",  "-t", "iso9660", "-r", options.device]) == 0:
						break
				else:
					fatal("failed to mount", options.device, "after", options.mount_count, "attempts with a delay of", options.mount_sleep, "seconds")
				
				md5.seek(0)
				with open(os.path.join(options.mount_point, options.md5sum_name)) as on_dvd:
					if line_compare(md5, on_dvd) != len(filenames):
						fatal("file missing in", options.md5sum_name)
				if not options.nocheck:
					print("checking", len(filenames), "files")
					subprocess.check_call(["md5sum", "--quiet", "--strict", "-c", options.md5sum_name], cwd=options.mount_point)
				subprocess.check_call(["eject", options.device])

if __name__ == "__main__":
	main()
