#!/usr/bin/python3
# photo-directory-archive Copyright (c) 2013 Stuart Pook (http://www.pook.it/)
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os, optparse, sys, errno, subprocess

def get_first_snapshot_with_album(album, snapshots, options):
	for snapshot in snapshots:
		dir = os.path.join(options.snapshots, snapshot, album)
		try:
			files = os.listdir(dir)
			return snapshot, files
		except OSError as e:
			if e.errno != errno.ENOENT:
				raise
				
	sys.exit(os.path.basename(sys.argv[0]) + ": album '" + album + "' not found in snapshots '" + options.snapshots + "'")
	
def getsize(path, options):
	sz = os.path.getsize(path) 
	r = (sz + options.block_size - 1) // options.block_size
	print (path, sz, r)
	return r

def do_album(album, snapshots, options):
	snapshot, files  = get_first_snapshot_with_album(album, snapshots, options)
	args = []
	sz = 0
	for file in files:
		if file.endswith(options.photo_suffix):
			f = os.path.join(options.snapshots, snapshot, album, file)
			args.append(album + "/" + file + "=" + f)
			sz += getsize(f, options)
	
	current_dir = os.path.join(options.photos, album)
	for file in os.listdir(current_dir):
		if file.endswith(options.rawtherapee_suffix):
			f = os.path.join(current_dir, file)
			args.append(album + "/" + file + "=" + f)
			sz += getsize(f, options)
			
	return sz, args
	
def main():	
	parser = optparse.OptionParser(usage="%prog [--help] -V volid [options] album ...")
	parser.disable_interspersed_args()
	
	parser.add_option("-x", "--execute", action="store_true", help="make DVD")
	parser.add_option("-v", "--verbose", action="store_true", help="verbose")
	parser.add_option("-V", "--volid", help="volume name")
	parser.add_option("-n", "--dryrun", default=False, action="store_true", help="do not execute")
	parser.add_option("--snapshots", default="/disks/snapshots", help="snapshots [%default]")
	parser.add_option("--photos", default=os.path.expanduser("~/photos"), help="snapshots [%default]")
	parser.add_option("--photo_suffix", default=".cr2", help="photo suffix [%default]")
	parser.add_option("--block_size", type='int', default=2048, help="block size for space calculations [%default]")
	parser.add_option("--dvd_size", type='int', default=4700 * 1000 * 1000, help="DVD size for space calculations [%default]")
	parser.add_option("--rawtherapee_suffix", default=".cr2.pp3", help="rawtherapee suffix [%default]")
	parser.add_option("--command", default="dvdmake", help="command to create a DVD [%default]")

	(options, args) = parser.parse_args()
	
	if not options.volid:
		parser.error("must use the --volid non-optional option")
		
	snapshots = os.listdir(options.snapshots)
	snapshots.sort()
		
	size = 0
	command = [ options.command, "-V", options.volid ]
	for i in args:
		sz, arguments = do_album(i, snapshots, options)
		size += sz
		command.extend(arguments)
	
	bytes = sz * options.block_size
	print(sz, "sectors,", bytes, "bytes, ", "%.2f %%" % (bytes * 100 / options.dvd_size))
	print(command)
	if options.execute:
		subprocess.check_call(command)

if __name__ == "__main__":
	main()
