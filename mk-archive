#!/usr/bin/python3
# mk-archive Copyright (c) 2013 Stuart Pook (http://www.pook.it/)
# make a squashfs on luks image of all my files to be archived
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# don't put newlines at end of the passwords in the password files

# to mount use:
#		sudo mount -r /dev/sdd2 /mnt
# to umount:
#		sudo umount.crypt /mnt

import os
import sys
import subprocess
import tempfile
import optparse
import shlex
import time
import datetime
import hashlib
import errno
import stat
import shutil
import math
import pwd

class MyError(Exception):
	"""Base class for exceptions in this module."""
	pass

def verbose(options, *args):
	if options.verbose:
		print(*args, file=sys.stderr)

def print_command(command, cwd=None, stdin=None):
	if cwd:
		print("(cd", cwd, '&& ', end='')
	print(" ".join([shlex.quote(c) for c in command]), end="")
	if stdin:
		print(" <", stdin, end="")
	if cwd:
		print(")")
	else:
		print()
	return command

def call(options, command, stdin=None, cwd=None):
	print_command(command, stdin=stdin, cwd=cwd)
	if not options.dryrun:
		if stdin:
			subprocess.check_call(command, cwd=cwd, stdin=open(stdin))
		else:
			subprocess.check_call(command, cwd=cwd)

def call_sudo(options, command, stdin=None):
	call(options, ["sudo"] + command, stdin=stdin)

def output(command, stdin=None):
	print_command(command, stdin=stdin)
	if stdin:
		r = subprocess.check_output(command, stdin=open(stdin))
	else:
		r = subprocess.check_output(command)
	return r.decode().strip()

def output_sudo(command, stdin=None):
	return output(["sudo"] + command, stdin=stdin)

def umount(options, mount_point, command="umount"):
	os.stat(mount_point)
	if os.path.ismount(mount_point):
		call_sudo(options, [command, mount_point])

def check_does_not_exist(f, options):
	if os.path.exists(f):
		raise MyError(f + " must not exist")

def make_sparse_file(name, size):
	try:
		os.remove(name)
	except IOError as e:
		if e.errno != errno.ENOENT:
			raise
	image = open(name, "w")
	image.seek(size - 1)
	image.write("\0")
	image.flush()
	image.seek(0)
	assert os.fstat(image.fileno()).st_size == size
	return image

def get_overhead(loop, crypt_device, arg, options):
	image_size = int(output_sudo(["blockdev", "--getsize", loop]))
	crypt_size = int(output_sudo(["blockdev", "--getsize", crypt_device]))
	return image_size - crypt_size

def copy_squash(loop, crypt_device, squash_file, options):
	call_sudo(options, ["cp", squash_file, crypt_device])

def perform_on_image(image_filename, size, options, passwords, func, arg):
	with make_sparse_file(image_filename, size) as image:
		loop =  output_sudo(["losetup", "--show", "-f", image_filename])
		try:
			call_sudo(options, ["sudo", "cryptsetup", "luksFormat", loop, "-"], stdin=passwords[0])
			for f in  passwords[1:]:
				call_sudo(options, ["cryptsetup", "luksAddKey", loop, "--key-file", passwords[0], f])
			call_sudo(options, ["cryptsetup", "luksOpen", "--key-file", passwords[-1], loop, options.crypt_device])
			try:
				crypt_device = os.path.join("/dev/mapper", options.crypt_device)
				return func(loop, crypt_device, arg, options)
			finally:
				call_sudo(options, ["cryptsetup", "remove", options.crypt_device])
		finally:
			call_sudo(options, ["losetup", "-d", loop])

def md5check(dir, options):
	call(options, ["md5sum", "--quiet", "--strict", "--check", options.md5sums], cwd=dir)

def compare(original, cdrom):
	n = 0
	with open(original, "rb") as orig:
		with open(cdrom, "rb") as cd:
			while True:
				orig_buf = orig.read(1024 * 2)
				if not orig_buf:
					break
				cd_buf = cd.read(len(orig_buf))
				if not cd_buf:
					raise MyError("EOF on %s after %d bytes" % (cdrom, n))
				if len(cd_buf) != len(orig_buf):
					raise MyError("short read (%d bytes) on %s, wanted %d bytes (after %d bytes)" % (len(cd_buf), cdrom, len(orig_buf)))
				if cd_buf != orig_buf:
					raise MyError("%s and %s are different between %d and %d bytes" % (original, cdrom, n, n + len(cd_buf)))
				n += len(cd_buf)
	print("compared %d bytes of %s and %s" % (n, original, cdrom))

def burn_cdrom(image_filename, squash_mount, passwords, options):
	umount(options, options.cdrom_mountpoint, command="umount.crypt")
	with open(image_filename, "rb") as image_file:
		image_file.read(512) # just checking
		if options.blank:
			if options.dvd:
				pass # call(options, ["dvd+rw-format", "-blank", options.cdrom])
			else:
				call(options, [options.wodim, "blank=" + options.blank_type, "dev=" + options.cdrom])
		if options.dvd:
			call(options, ["growisofs", "-dvd-compat", "-Z", options.cdrom + "=" + image_filename])
		else:
			call(options, [options.wodim, "-v", "padsize=2M", "-dao", "-eject", "dev=" + options.cdrom, image_filename])
	call(options, ["eject", "-t", options.cdrom])
	time.sleep(options.cd_insert_sleep)
	compare(image_filename, options.cdrom)
	call_sudo(options, ["mount", "-r", options.cdrom, options.cdrom_mountpoint], stdin=passwords[-1])
	md5check(options.cdrom_mountpoint, options)
	call(options, ["diff", "-r", squash_mount, options.cdrom_mountpoint])
	umount(options, options.cdrom_mountpoint, command="umount.crypt")

def set_add(s, element):
	n = len(s)
	s.add(element)
	return n != len(s)

def symlink(src, dest, options):
	verbose(options, "ln -s", src, dest)
	os.symlink(src, dest)
	os.stat(dest)

def mkdir(d, options):
	verbose(options, "mkdir", d)
	if not options.dryrun:
		os.mkdir(d)

def make_archive_links(src, dest, up, down, done, directories, options):
	for f in os.listdir(src):
		s = os.path.join(src, f)
		d = os.path.join(dest, f)
		if os.path.isdir(s):
			if set_add(directories, d):
				mkdir(d, options)
			make_archive_links(s, d, os.path.join("..", up), os.path.join(down, f), done, directories, options)
		else:
			new = os.path.join(down, f)
			if d in done:
				verbose(options, "don't make", d, "a link to", new, "as it is a link to", done[d])
			else:
				done[d] = new
				try:
					symlink(os.path.join(up, new), d, options)
				except OSError:
					print("make_archive_links done=", done)
					raise

def md5sum(filename):
	md5 = hashlib.md5()
	with open(filename,'rb') as f:
		for chunk in iter(lambda: f.read(128 * md5.block_size), b''):
			md5.update(chunk)
	return md5.hexdigest()

def raiseit(ex):
	try:
		raise ex
	except OSError as ex:
		# hack!
		if ex.errno != errno.EACCES or not ex.filename.endswith("/lost+found"):
			raise

def check_permissions(fn, perms, options):
	mode = os.stat(fn).st_mode
	if (mode & perms) != perms:
		raise MyError("%s must have at least permissions %#o (has %#o)" % (fn, perms, stat.S_IMODE(mode)))

def is_ascii(s):
    return all(ord(c) < 128 for c in s)

def check_filename(dirpath, fn, options):
	full_name = os.path.join(dirpath, fn)
	if fn == ".thumbs":
		raise MyError("bad file name " + full_name)
	if not is_ascii(fn):
		raise MyError("file names must be ASCII " + full_name)
	return full_name

def create_md5sums(tmpd, directories, options):
	file_perms = stat.S_IROTH | stat.S_IRUSR | stat.S_IRGRP
	directory_perms = file_perms | stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH
	md5 = os.path.join(tmpd, options.md5sums)
	with open(md5, "w") as sums:
		for dir in directories:
			skip = len(os.path.dirname(dir)) + 1
			try:
				sums.write(md5sum(dir) + "  " + dir[skip:] + "\n")
				check_permissions(dir, file_perms, options)
			except IOError as ex:
				if ex.errno != errno.EISDIR:
					raise
				for dirpath, dirnames, filenames in os.walk(dir, onerror=raiseit):
					for fname in filenames:
						full_name = check_filename(dirpath, fname, options)
						check_permissions(full_name, file_perms, options)
						relative_name = full_name[skip:]
						sums.write(md5sum(full_name) + "  " + relative_name + "\n")
					for dn in dirnames:
						check_permissions(check_filename(dirpath, dn, options), directory_perms, options)

	return md5

def extra_info(tmpd, new_archive, options):
	now = datetime.datetime.now()
	id = new_archive

	date_stamp = os.path.join(tmpd, now.date().isoformat())
	with open(date_stamp, "w") as f:
		f.write(id + "\n")

	volume = "volume-" + id
	tag = os.path.join(tmpd, volume)
	with open(tag,"w") as f:
		f.write(str(now) + "\n")

	volid = os.path.join(tmpd, options.volid_filename)
	with open(volid,"w") as f:
		f.write(id + "\n")

	return [ date_stamp, tag, volid ]

def readlink_fullname(path):
	return os.path.join(os.path.dirname(path), os.readlink(path))

def copy_obj_to_new_file(src_obj, dst, options):
	statinfo = os.stat(src_obj.fileno())
	with os.fdopen(os.open(dst, os.O_WRONLY | os.O_CREAT | os.O_EXCL, 0o666), "wb") as new_file:
		shutil.copyfileobj(src_obj, new_file)
	os.utime(dst, ns=(statinfo.st_atime_ns, statinfo.st_mtime_ns))

def copy_to_new_file(src, dst, options):
	with open(src, 'rb') as src_obj:
		copy_obj_to_new_file(src_obj, dst, options)

def copytree(src, dst, options, symlinks=False):
	verbose(options, "copytree(%s, %s, %d)" % (src, dst, symlinks))
	try:
		names = os.listdir(src)
	except NotADirectoryError:
		copy_to_new_file(src, dst, options)
	else:
		os.mkdir(dst)
		for name in names:
			srcname = os.path.join(src, name)
			dstname = os.path.join(dst, name)
			if symlinks and os.path.islink(srcname):
				linkto = os.readlink(srcname)
				os.symlink(linkto, dstname)
			elif os.path.isdir(srcname):
				copytree(srcname, dstname, options, symlinks)
			else:
				copy_to_new_file(srcname, dstname, options)

def copy_other_files(new_archive_directory, options):
	for extra in options.extras:
		copytree(extra, os.path.join(new_archive_directory, os.path.basename(extra)), options, symlinks=True)

def make_documents(tmpd, new_archive, new_archive_directory, old_archives, options):
	if options.test:
		return ["/lib/terminfo" ]

	documents_name = options.documents
	documents = os.path.join(tmpd, documents_name)
	os.mkdir(documents)
	files = dict()
	directories = set()

	cdrom_base = "cdrom"
	cdrom = os.path.join(tmpd, cdrom_base)
	mkdir(cdrom, options)

	top_level = []

	for archive in old_archives:
		start = os.path.join(options.previous_archive, archive)
		top_level.append(start)
		to = os.path.join(tmpd, archive)
		symlink(start, to, options)

	top_level.append(new_archive_directory)

	for archive in old_archives + [new_archive]:
		here = os.path.join(tmpd, archive, documents_name)
		if os.path.isdir(here):
			symlink(os.path.join("..", archive), os.path.join(cdrom, archive), options)
			make_archive_links(here, documents, os.path.join("..", cdrom_base) , os.path.join(archive, documents_name), files, directories, options)

	top_level.append(readlink_fullname(__file__))
	copy_other_files(new_archive_directory, options)
	top_level.extend(extra_info(tmpd, new_archive, options))
	top_level.append(create_md5sums(tmpd, top_level, options))
	top_level.extend([documents, cdrom])

	return top_level

def copy_documents(new_files, options):
	where = os.path.join(new_files, options.documents)
	for dirpath, dirnames, filenames in os.walk(options.current_documents, onerror=raiseit):
		mkdir = False
		suffix = dirpath[len(options.current_documents) + 1:]
		new_dirpath = os.path.join(where, suffix)
		for fname in filenames:
			old_name = os.path.join(dirpath, fname)
			try:
				old_file = open(old_name, 'rb')
			except FileNotFoundError:
				pass
			except:
				raise
			else:
				if not mkdir:
					os.makedirs(new_dirpath)
					mkdir = True
				new_name = os.path.join(new_dirpath, fname)
				copy_obj_to_new_file(old_file, new_name, options)
	return where

def next_archive_number(options):
	found = set()
	count = 0
	archives = []
	for dir in os.listdir(options.previous_archive):
		if dir.startswith(options.prefix):
			count += 1
			v = int(dir[len(options.prefix):])
			if v <= 0:
				raise MyError("bad archive number %d" % v)
			found.add(int(dir[len(options.prefix):]))
			archives.append([v, dir])
	if count != len(found):
		raise MyError("duplicate archive numbers")
	archives.sort()
	if archives[0][0] != 1:
		raise MyError("first archive should be number 0")
	last = archives[-1][0]
	if last != count:
		raise MyError("missing archives")
	return last + 1, list(x[1] for x in archives)

def create_image(image_filename , squash_mount, passwords, options):
	archive_number, old_archives = next_archive_number(options)
	verbose(options, "new archive number", archive_number)
	block_size = 512
	if options.squash_block_size % block_size != 0:
		raise MyError("squash_block_size is not a multiple of %d" % block_size)

	umount(options, squash_mount)
	luks_mount = os.path.join(options.output, options.luks_mount)
	umount(options, luks_mount, command="umount.crypt")

	squash_filename = os.path.join(options.output, options.squash_file)

	squash_file = open(squash_filename, "w")
#	if True:
#		tmpd = tempfile.mkdtemp(prefix="mkarchive")
	with tempfile.TemporaryDirectory(prefix='mk-archive') as tmpd:
		exclude = os.path.join(tmpd, "exclude")
		with open(exclude, "w") as f:
			f.write("lost+found\n")
		new_archive = "%s%d" % (options.prefix, archive_number)
		new_archive_directory = os.path.join(tmpd, new_archive)
		os.mkdir(new_archive_directory, mode=0o755)
		copy_documents(new_archive_directory, options)
		call(options, ["mksquashfs"] + make_documents(tmpd, new_archive, new_archive_directory, old_archives, options) + [squash_filename,
			"-b", str(options.squash_block_size),
			"-all-root",
			"-comp", "xz",
			"-noappend",
			"-ef", exclude])

	squash_file.seek(0, 2)
	squash_size = squash_file.tell()
	if squash_size % block_size != 0:
		raise MyError("file created by mksquashfs not a multiple of %d" % block_size)
	squash_blocks = int(squash_size / block_size)

	call_sudo(options, ["mount", "-o", "loop", "-r", squash_filename, squash_mount])
	md5check(squash_mount, options)

	print(squash_filename, squash_blocks, "blocks", squash_size / 1024 / 1024, "MiB")

	overhead = perform_on_image(image_filename, options.luks_size * 1024 * 1024, options, passwords[:1], get_overhead, None)

	print("overhead", overhead, overhead / 2 / 1024)
	image_size = block_size * (squash_blocks + overhead)
	print("image_size", image_size / 1024 / 1024, "MiB")

	perform_on_image(image_filename, image_size, options, passwords, copy_squash, squash_filename)

	for password in passwords:
		time.sleep(1)
		umount(options, luks_mount, command="umount.crypt")
		time.sleep(1)
		call_sudo(options, ["mount", "-r", "-o", "loop", image_filename,  luks_mount], stdin=password)
		md5check(luks_mount, options)

	call(options, ["diff", "-r", squash_mount, luks_mount])

def make_file(filename, contents, options):
	verbose(options, "cat > %s << Eof" % filename)
	verbose(options, contents + "Eof")
	if not options.dryrun:
		with open(filename, 'w') as v:
			v.write(contents)

def fill_fat(partition, volid, options):
	call_sudo(options, ["mkfs.fat", "-n", volid.upper(), partition])
	with tempfile.TemporaryDirectory(suffix='mk-archive-usb-mount') as mountpoint:
		call_sudo(options, ["mount", "-o", "uid=%d" % os.getuid(), "-o", "dmask=077", "-o", "fmask=077", partition, mountpoint])
		for r in options.fat_extras:
			if options.dryrun:
				verbose(options, "cp", r, mountpoint)
			else:
				shutil.copy(r, mountpoint)
		make_file(os.path.join(mountpoint, "volid.txt"), volid + '\n', options)
		make_file(os.path.join(mountpoint, volid + ".txt"), volid + '\n', options)
		make_file(os.path.join(mountpoint, "README.txt"),
			"This is %s\n\n" % volid +
			"Please return it to " + pwd.getpwuid(os.getuid()).pw_gecos.rstrip(',') + "\n\n" +
			"to mount use:\n" +
			"  sudo mount -r /dev/sd?2 /mnt\n"+
			"to unmount:\n" +
			"  sudo umount.crypt /mnt\n\n" +
			"You can mount any of these partitions: %s\n" % " ".join("/dev/sd?%d" % (i + 2) for i in range(options.usb_partition_count)), options)
		call_sudo(options, ["umount", partition])

def burn_usb(image_filename, squash_mount, passwords, options):
	if options.align_usb <= options.start_usb:
		raise MyError("bad USB alignments %d < %d" % (options.align_usb, options.start_usb))
	device = options.usb
	unit_bytes = 1024 * 1024 * options.align_usb
	with open(os.path.join(squash_mount, options.volid_filename)) as v:
		volid = v.readline().rstrip()
	with open(device, 'r+b') as dummy:
		dummy.read(512)
	with open(image_filename, 'rb') as image:
		blocks = int(math.ceil(os.fstat(image.fileno()).st_size / unit_bytes))
		parted = ["parted", "--script", "--", device]
		call_sudo(options, parted + [ "mklabel", "msdos"])
		unit_format = "%d" + "MiB"
		call_sudo(options, parted + [ "mkpart", "primary", "fat32", unit_format % options.start_usb, unit_format % options.align_usb])
		for i in range(0, options.usb_partition_count):
			start = (1 + i * blocks) * options.align_usb
			end = (1 + (i + 1) * blocks) * options.align_usb
			call_sudo(options, parted + [ "mkpart", "primary", unit_format % start, unit_format % end])
		fill_fat(device + "1", volid, options)
		for i in range(0, options.usb_partition_count):
			partition = "%s%d" % (device, i + 2)
			call_sudo(options, ["dd", "if=" +  image_filename, "of=" + partition, "bs=%dM" % options.align_usb])
			with tempfile.TemporaryDirectory(suffix='mk-archive-usb-mount') as mountpoint:
				call_sudo(options, ["mount", "-r", partition, mountpoint], stdin=passwords[0])
				call(options, ["md5sum", "--quiet", "--check", options.md5sums], cwd=mountpoint)
				call_sudo(options, ["umount.crypt", mountpoint])

def rename(src, dst, options):
	verbose(options, "mv", src, dst)
	if not options.dryrun:
		os.rename(src, dst)

def move_down(args, options):
	dummy, archives = next_archive_number(options)
	paths = list(os.path.join(options.previous_archive, a, options.documents) for a in archives)
	paths.append(options.current_documents)
	where = os.path.dirname(options.move_down)
	for path in paths:
		created = False
		for arg in args:
			src = os.path.join(path, where, arg)
			if os.path.lexists(src):
				dir = os.path.join(path, options.move_down)
				if not created:
					created = True
					if not os.path.exists(dir):
						mkdir(dir, options)
				dst = os.path.join(dir, arg)
				if os.path.exists(dst):
					raise MyError("move_down %s exists (from %s) % (dst, src)")
				rename(src, dst, options)

def main():
	parser = optparse.OptionParser(usage="usage: %prog [--help] [options]")
	parser.disable_interspersed_args()
	parser.add_option("-v", "--verbose", action="store_true", help="verbose messages")
	parser.add_option("-n", "--dryrun", action="store_true", help="dryrun (not supported in all modes)")
	parser.add_option("-t", "--test", action="store_true", help="use test data to create the image")
	parser.add_option("--dvd", action="store_true", help="DVD rather than CD")
	parser.add_option("--create", action="store_true", help="create image even if burning")
	parser.add_option("--blank", action="store_true", help="blank CDROM and burn an existing image")
	parser.add_option("--blank_type", default="fast", help="type of CD blanking [%default]")
	parser.add_option("--burn", action="store_true", help="burn an existing image")
	parser.add_option("--wodim", default="wodim", metavar="program", help="command to burn a CD [%default]")
	parser.add_option("--usb", metavar="DEVICE", help="device of an USB memory stick to overwrite with the image (/dev/sdd?) [%default]")
	parser.add_option("--align_usb", metavar="MIBIBYTES", type='int', default=128, help="align data partitions on USB stick [%default]")
	parser.add_option("--start_usb", metavar="MIBIBYTES", type='int', default=4, help="align FAT partition on USB stick [%default]")
	parser.add_option("--usb_partition_count", metavar="INTEGER", type='int', default=3, help="how many copies of the image to put on the USB stick [%default]")

	parser.add_option("--cdrom", default="/dev/cdrw", metavar="device", help="CD device [%default]")
	parser.add_option("--cdrom_mountpoint", default="/media/cdrom0", metavar="directory", help="where to mount a CD [%default]")
	parser.add_option("--cd_insert_sleep", type="float", default=20, help="time to sleep after inserting CD [%default]")
	parser.add_option("--md5sums", default="md5sums.txt", metavar="filename", help="file to store MD5 checksums [%default]")
	parser.add_option("--fat_extras", action="append", default=["/disks/stuart-sshfs/keepass.kdb"], help="files for FAT partition unencrypted [%default]")

	parser.add_option("--extras", action="append", default=[
		"/disks/stuart-sshfs/keepass.kdb",
		os.path.expanduser("~/var/owncloud/contacts.vcf"),
		os.path.expanduser("~/var/owncloud/calendar.ics"),
		os.path.expanduser("~/archive/passwords"),
		os.path.expanduser("~/archive/email"),
		os.path.expanduser("~/archive/accounts")], metavar="filename", help="extra files to include [%default]")

	parser.add_option("--volid_filename", default="volid", help="filename to write the volume id [%default]")

	parser.add_option("--prefix", default="archive", help="archive names prefix [%default]")
	parser.add_option("--previous_archive", default="/run/archive10/archive-new", help="old archives [%default]")
	parser.add_option("--luks_size", type="int", default=4, help="luks overhead estimation in mibibytes [%default]")
	parser.add_option("--password_dir", default="/run/archive10/passwords", help="directory containing passwords [%default]")
	parser.add_option("--crypt_device", default="mk_archive_device", help="crypt device name [%default]")
	parser.add_option("--output", default="/tmp/stuart", help="output directory [%default]")
	parser.add_option("--squash_mount", default="squash_mount", help="squash mount point relative to --output [%default]")
	parser.add_option("--squash_file", default="archive.sqsh", help="squash filename relative to --output [%default]")
	parser.add_option("--luks_file", default="archive.luks", help="luks output filename relative to --output [%default]")
	parser.add_option("--luks_mount", default="luks_mount", help="luks mount point relative to --output [%default]")
	parser.add_option("--documents", default="documents", help="name of directory containing documents [%default]")
	parser.add_option("--current_documents", default=os.path.expanduser("~/archive/documents"), help="directory containing current documents [%default]")

	parser.add_option("--squash_block_size", type="int", default=16 * 4096, help="mksquashfs block size [%default]")

	parser.add_option("--move_down", default=None, help="move files down into this directory [%default]")

	(options, args) = parser.parse_args()

	os.umask(0o22)

	if options.move_down:
		move_down(args, options)
		return 0

	if len(args):
		parser.error("no arguments allowed")
		return 1

	image_filename = os.path.join(options.output, options.luks_file)
	squash_mount = os.path.join(options.output, options.squash_mount)

	passwords = [os.path.join(options.password_dir, d) for d in os.listdir(options.password_dir)]
	if len(passwords) == 0:
		raise MyError("must have at least one file in " + options.password_dir)

	burn = options.burn or options.blank

	if options.create or (not(burn) and not options.usb):
		create_image(image_filename , squash_mount , passwords, options)
	if burn:
		burn_cdrom(image_filename, squash_mount, passwords, options)
	if options.usb:
		burn_usb(image_filename, squash_mount, passwords, options)
	return 0

if __name__ == "__main__":
	sys.exit(main())
