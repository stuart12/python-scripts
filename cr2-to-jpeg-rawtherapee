#!/usr/bin/python3
# cr2-to-jpeg-rawtherapee Copyright (c) 2012 Stuart Pook (http://www.pook.it/)
# convert a cr2 to jpeg using rawtherapee
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
import os
import optparse
import sys
import subprocess
import tempfile
import pipes

def strip_end(text, suffix):
	if not text.endswith(suffix):
		return text
	return text[:-len(suffix)]
	
def myname():
	return os.path.basename(sys.argv[0])
  
def main():
	parser = optparse.OptionParser(usage="usage: %prog [options] inputfile outputfile")
	(options, args) = parser.parse_args()
	if len(args) != 2:
		parser.error("must supply 2 arguments")
		
	output = args[0]
	root = output.split('/', 1)[0]
#	grandparent = os.path.split(os.path.dirname(os.path.dirname(output)))[1]
	try:
		size, quality = root.split("-")
	except ValueError:
		sys.exit(os.path.basename(sys.argv[0]) + ": top directory name must be in the form XX-YY, found: " + root)
	pp3 = os.path.join(os.path.expanduser("~"), "lib", "RawTherapee", "resize", size + ".pp3")
	with open(pp3) as dummy:
		pass
	
	input = strip_end(args[1], ".pp3")

	command = [ "rawtherapee", "-Y", "-s"]
	command.append("-j" + quality)
	command.extend(["-p", pp3])
	command.extend(["-o", output])
	command.extend(["-c", input])
	stderr = tempfile.TemporaryFile(mode='w+')
	status = subprocess.call(command, stdout=open("/dev/null", "w"), stderr=stderr)
	if status:
		print(myname()+ ":", "command failed (%d):" % status, " ".join(pipes.quote(c) for c in command), file=sys.stderr)
		stderr.seek(0)
		for line in stderr:
			print(line, end='', file=sys.stderr)
		sys.exit(status)
	
if __name__ == "__main__":
	main()
