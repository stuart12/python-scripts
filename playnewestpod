#!/usr/bin/python3 -B
# playnewestpod Copyright (c) 2015 Stuart Pook (http://www.pook.it/)
# play the most recent podcast from a feed url
# set noexpandtab copyindent preserveindent softtabstop=0 shiftwidth=4 tabstop=4
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
import os
import sys

def myname():
    return os.path.basename(sys.argv[0])

import argparse
import collections
try:
    import podcastparser
except ModuleNotFoundError:
    print(myname() + ": on debian: apt-get install python3-podcastparser", file=sys.stderr)
    raise
import tempfile
import urllib.request
try:
    import mpd
except ImportError:
    print("sudo apt install python3-mpd", file=sys.stderr)
    raise

def verbose(options, level, *message):
    if options.verbosity >= level:
        print(myname() + ":", *message, file=sys.stderr)

PlayAble = collections.namedtuple('PlayAble', ['date', 'guid', 'url', 'feed', 'channel', 'title'])

def scan(feedurl, played, options):
    verbose(options, 1, "scanning", feedurl)
    podcasts = []
    parsed = podcastparser.parse(feedurl, urllib.request.urlopen(feedurl))
    channel = parsed['title']
    for episode in parsed['episodes']:
        guid = episode['guid']
        if guid and not guid in played:
            for enclosure in episode['enclosures']:
                if enclosure['mime_type'].startswith('audio/'):
                    date = int(episode['published'])
                    p = PlayAble(date, guid, enclosure['url'], feedurl, channel, episode['title'])
                    podcasts.append(p)
                    verbose(options, 2, p)
    return podcasts

def play(playable, played, player, options):
    player.add(playable.url)
    player.play()
    #mpd_playurl.playurls([playable.url], verbosity=options.verbosity)
    print(playable.guid, file=played)
    played.flush()

def get_cache(options):
    fname = os.path.join(options.cache, "played")
    mode = "a+"
    try:
        return open(fname, mode)
    except FileNotFoundError:
        os.makedirs(options.cache, mode=0o700)
        return open(fname, mode)

def main():
    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter,
            description="play the most recent podcast")

    parser.add_argument("-v", "--verbosity", "--verbose", action="count", default=0, help="increase output verbosity")
    parser.add_argument("--cache", metavar="DIRECTORY", default=os.path.expanduser("~/.cache/playnewestpod"),
            help="stock list of played podcasts")
    parser.add_argument("--config", metavar="DIRECTORY", default=os.path.expanduser("~/.config/playnewestpod"),
            help="stock list of url podcasts")
    parser.add_argument('-a', "--add", action="store_true", help="add podcast urls to list")
    parser.add_argument("--loop", action="store_true", help="play all podcasts")
    parser.add_argument("--mpd", metavar="hostname", default="localhost", help="MPD host to contact")
    parser.add_argument("--port", metavar="TCP PORT", type=int, default=6600, help="port number of mpd host")

    parser.add_argument('urls', nargs=argparse.REMAINDER, help='feeds to play')

    options = parser.parse_args()
    podcasts = os.path.join(options.config, "podcasts")
    if options.add:
        with open(podcasts, "a+") as out:
            for url in options.urls:
                print(url, file=out)
    else:
        player = mpd.MPDClient()
        player.connect(options.mpd, options.port)
        with get_cache(options) as played:
            played.seek(0)
            already_played = frozenset(line.strip() for line in played)
            playables = []
            if options.urls:
                for url in options.urls:
                    playables.extend(scan(url, already_played, options))
            else:
                with open(podcasts) as pods:
                    for pod in pods:
                        playables.extend(scan(pod.strip(), already_played, options))
            playables.sort(key=lambda x: -x.date)
            player.clear()
            for playable in playables:
                play(playable, played, player, options)
                if not options.loop:
                    break

if __name__ == "__main__":
    main()
