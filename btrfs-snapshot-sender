#!/usr/bin/python3
# btrfs-snapshot-sender Copyright (c) 2014 Stuart Pook (http://www.pook.it/)
# Use btrfs send to backup from existing snapshots. Can do incremental backups.
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# To use this program just create a file
# called "/etc/local/btrfs-snapshot-sender.conf" containing:
'''
[DEFAULT]
SnapshotRoot = /disks/data/snapshots
[music]
[photos]
'''
# This will find the most recent snapshot under /disks/data/snapshots/{music,photos}
# and back them up using btrfs send and gpg.
# You will have to read the code to find the other options that can go in the configuration file.

# Watch out for https://patchwork.kernel.org/patch/3258971/

import os
import sys
import subprocess
import hashlib
import optparse
import configparser
import pipes
import errno
import fnmatch
import shutil

def myname():
	return os.path.basename(sys.argv[0])
	
def verbose(options, *args):
	if options.verbose:
		print(myname() + ":", *args, file=sys.stderr)
	
def fatal(options, *args):
	print(myname() + ": fatal error:", *args, file=sys.stderr)
	sys.exit(7)
	
def flush(f):
	f.flush()
	os.fsync(f.fileno())
	
def rename(src, dst, options):
	verbose(options, "mv", src, dst)
	os.rename(src, dst)
	
def scan_snapshot_directory(directory, section, in_use_tag, options):
	glob = section.get("SnapshotGlob", "[!.]*[!#~]")
	in_use = None
	latest = None
	for entry in os.listdir(directory):
		if entry.endswith(in_use_tag) and fnmatch.fnmatch(entry[:-len(in_use_tag)], glob):
			if in_use:
				fatal(options, "two snapshots are marked as in use (" + in_use_tag + ") in", directory)
			in_use = entry
		elif fnmatch.fnmatch(entry, glob):
			if not latest or entry > latest:
				latest = entry

	if not latest:
		fatal(options, "no snapshots in", directory)
	if in_use and in_use > latest:
		fatal(options, "latest snapshot '" + latest + "' earlier than last used '" + in_use + "' in", directory)
	return latest, in_use
	
def print_command(cmd, options):
	verbose(options, "run", " ".join(pipes.quote(c) for c in cmd))
	return cmd
	
def start_encryption(input, section, options):
	gpg_command = section.get("Filter", None)
	if not gpg_command:
		return input, None
	gpg = gpg_command.split()
	for i in range(100):
		extra = section.get("FilterArgument%02d" % i, None)
		if extra is not None:
			gpg.append(extra)
	print_command(gpg, options)
	return subprocess.Popen(gpg, stdout=subprocess.PIPE, stdin=input.stdout), gpg
	
def get_btrfs_command(section, options):
	return section.get("BtrfsSend", "btrfs send").split()
	
def start_full_backup(section, snapshot, options):
	cmd = get_btrfs_command(section, options)
	if options.btrfs_verbose:
		cmd.append("-v")
	cmd.append(snapshot)
	print_command(cmd, options)
	return subprocess.Popen(cmd, stdout=subprocess.PIPE), cmd
	
def start_incremental_backup(section, latest_fname, in_use_fname, options):
	cmd = get_btrfs_command(section, options)
	if options.btrfs_verbose:
		cmd.append("-v")
	cmd.extend(["-p", in_use_fname])
	cmd.append(latest_fname)
	print_command(cmd, options)
	return subprocess.Popen(cmd, stdout=subprocess.PIPE), cmd
	
def read_write_md5(input, output, options):
	dumpmd5 = hashlib.md5()
	while True:
		buf = input.read(4 * 1024)
		if len(buf) == 0:
			break
		output.write(buf)
		dumpmd5.update(buf)
	return dumpmd5.hexdigest()
	
def wait_command(p, cmd, options):
	if p.wait():
		fatal(options, "failed:", " ".join(pipes.quote(c) for c in cmd))
		
def set_filemode(file, section, options):
	u = section.get("OutputFileMode", None)
	if u:
		v = int(u, 8)
		verbose(options, "fchmod", "0%o" % v)
		os.fchmod(file.fileno(), v)
		
def get_directory(section, options):
	snapshots_key = "Snapshots"
	directory = section.get(snapshots_key, None)
	if directory:
		return directory
	snapshotroot_key = "SnapshotRoot"
	root = section.get(snapshotroot_key, None)
	if root is None:
		fatal(options, "a", snapshots_key, "or", snapshotroot_key, "attribute is required for section", section.name)
	return os.path.join(root, section.name)

def possible_unlink(output_name, options):
	try:
		os.unlink(output_name)
		verbose(options, "removed",  output_name)
	except FileNotFoundError as ex:
		if ex.errno != errno.ENOENT:
			raise

def do_backup(section, options):
	#setup
	in_use_tag = section.get("InUseTag", ".backup_source")
	directory = get_directory(section, options)
	name = section.get("OutputName", section.name)
	always_full = section.getboolean("AlwaysDoFull", False)
	
	latest, in_use = scan_snapshot_directory(directory, section, in_use_tag, options)
	do_full = options.full or always_full or not in_use
	
	if do_full:
		stem = "" if always_full else section.get("FullSuffix", "-0")
	else:
		stem = section.get("IncrementalSuffix", "+n")
	
	verbose(options, "in section", section.name, "latest", latest, "inuse", in_use, "full?", do_full)
	latest_fname = os.path.join(directory, latest)
	in_use_fname = os.path.join(directory, in_use) if in_use else None
	
	output_basename = name + stem + section.get("SendOutputSuffix", ".btrfs")
	output_name = os.path.join(options.output, output_basename)
	
	# start
	if do_full:
		backup, backup_command = start_full_backup(section, latest_fname, options)
	else:
		backup, backup_command = start_incremental_backup(section, latest_fname, in_use_fname, options)
		
	encryption, encryption_command = start_encryption(backup, section, options)
	
	#finish
	output_tmp_name = output_name + section.get("TmpSuffix", ".tmp")
	md5_basename = name + stem + section.get("MD5Suffix", ".md5")
	
	with open(os.path.join(options.output, md5_basename), "w") as md5_file:
		with open(output_tmp_name, "wb") as output_tmp:
			possible_unlink(output_name, options)
			md5 = read_write_md5(encryption.stdout, output_tmp, options)
			flush(output_tmp)
			set_filemode(output_tmp, section, options)
		
		wait_command(backup, backup_command, options)
		if encryption_command:
			wait_command(encryption, encryption_command, options)
		
		print(md5 + " *" + output_basename, file=md5_file)
	
		flush(md5_file)
		set_filemode(md5_file, section, options)

	if not options.no_update and (not section.get("StickySnapshot", False) or not in_use_fname):
		if in_use_fname:
			rename(in_use_fname, in_use_fname[:-len(in_use_tag)], options)
		if not always_full:
			rename(latest_fname, latest_fname + in_use_tag, options)
	rename(output_tmp_name, output_name, options)
	
	return md5_basename

def backup(config, sections, options):
	md5files = []
	for section_name in config.sections():
		if len(sections) == 0 or section_name in sections:
			section = config[section_name]
			if not section.getboolean("active", True):
				verbose(options, "skipping", section_name, "as it is flagged as inactive")
			else:
				md5files.append(do_backup(section, options))
		else:
			verbose(options, "skipping section", section_name, "as not in", sections)
			
	if options.check_md5:
		cmd = [ "md5sum", "--check", "--strict", "--quiet"] + md5files
		print_command(cmd, options)
		subprocess.check_call(cmd, cwd=options.output)
	
def read_config(options):
	config = configparser.ConfigParser()
	with open(options.config) as f:
		config.read_file(f)
	dir = options.config_dir
	if dir:
		try:
			entries = os.listdir(dir)
		except OSError as e:
			if e.errno != errno.ENOENT:
				raise
		else:
			for f in entries:
				if f.endswith(options.config_dir_contents_suffix):
					c = os.path.join(dir, f)
					verbose(options, "additional config from", c)
					with open(c) as f:
						config.read_file(f)
	return config

def read_btrfs(entry, stem, options):
	fencrypted = os.path.join(options.read, entry)
	with open(fencrypted) as encrypted:
		verbose(options, options.decrypter, fencrypted)
		if False:
			subprocess.check_call(["sudo", "true"])
			gpg = subprocess.Popen([options.decrypter], stdin=encrypted, stdout=subprocess.PIPE)
			btrfs_cmd = ["sudo", "btrfs", "receive", stem]
			reader = subprocess.Popen(btrfs_cmd, stdin=gpg.stdout)
			if reader.wait() != 0:
				sys.exit(" ".join(btrfs_cmd) + " failed")
			if gpg.wait() != 0:
				sys.exit(options.decrypter + " failed for " + fencrypted)
			
	snapshots = os.path.join(options.read, stem + ".snapshots")
	with open(snapshots, "w") as output:
		cmd = ["sudo", "btrfs", "subvolume", "list", "-uso", stem]
		verbose(options, " ".join(cmd), ">", snapshots)
		subprocess.check_call(cmd, stdout=output)
			
def get_md5_from_file(md5_file):
	with open(md5_file) as input:
		line = input.readline()
		if not line:
			sys.exit("no MD5 line in " + md5_file)
		pos = line.find(" *")
		if pos == -1:
			sys.exit("no MD5 in " + md5_file)
		return line[:pos]
			
def read_md5(entry, stem, options):
	md5_file = os.path.join(options.read, stem + ".md5")
	md5 = get_md5_from_file(md5_file)
	
	new_snapshot = os.path.join(stem, entry)
		
	tmp = new_snapshot + ".tmp"
	dumpmd5 = hashlib.md5()
	input_file = os.path.join(options.read, entry)
	with open(input_file, "rb") as input:
		with open(tmp, "wb") as output:
			verbose(options, "copying", input_file, "to", tmp)
			while True:
				buf = input.read(4 * 1024)
				if len(buf) == 0:
					break
				output.write(buf)
				dumpmd5.update(buf)

	new_md5 = dumpmd5.hexdigest()
	if new_md5 != md5:
		sys.exit("MD5 mismatch for %s (%s != %s)"  % (entry, md5, new_md5))
		
	with open(md5_file) as input:
		new_md5_file = os.path.join(stem, stem + ".md5")
		with open(new_md5_file, "w") as output:
			verbose(options, "cp", md5_file, new_md5_file)
			shutil.copyfileobj(input, output)
		
	verbose(options, "mv", tmp, new_snapshot)
	os.rename(tmp, new_snapshot)

def read(options, sections):
	tags = [ ("+n.btrfs", read_btrfs), (".btrfs", read_md5) ]
	for entry in os.listdir(options.read):
		for tag, func in tags:
			if entry.endswith(tag):
				stem = entry[:-len(tag)]
				if len(sections) == 0 or stem in sections:
					func(entry, stem, options)
				break
		
def main():
	parser = optparse.OptionParser(usage="%prog [options] [--help] [sections]")
	parser.disable_interspersed_args()
	parser.add_option("-v", "--verbose", action="store_true", help="verbose")
	parser.add_option("--read", default=None, help="read snapshots from directory")
	parser.add_option("-n", "--no_update", action="store_true", help="don't update the record of last backup")
	parser.add_option("--btrfs_verbose", action="store_true", help="give verbose flag to btrfs")
	parser.add_option("-5", "--check_md5", action="store_true", help="check MD5 sums of generated files")
	parser.add_option("-0", "--full", action="store_true", help="do full backups")
	parser.add_option("--output", default=".", help="output directory [%default]")
	parser.add_option("-C", "--config", default="/etc/local/btrfs-snapshot-sender.conf", help="config file [%default]")
	parser.add_option("--config_dir", default="/etc/local/btrfs-snapshot-sender.d", help="directory of config files [%default]")
	parser.add_option("--config_dir_contents_suffix", default=".conf", help="suffix for each file in directory of config files [%default]")
	parser.add_option("--decrypter", default="gpg", help="program to decrypt stdin [%default]")
	(options, sections) = parser.parse_args()
	
	if options.read:
		pass
		read(options, frozenset(sections))
	else:
		config = read_config(options)
		backup(config, frozenset(sections), options)

if __name__ == "__main__":
	main()
