#!/usr/bin/python3 -u
# set noexpandtab copyindent preserveindent softtabstop=0 shiftwidth=4 tabstop=4
# transform2 Copyright (c) 2012, 2013, 2014 Stuart Pook (http://www.pook.it/)
# transform all the files in a directory using a set of rules
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os, optparse, sys, subprocess, time
import errno
import pipes
import stat
import tempfile
import shutil
import yaml

class MyError(Exception):
	pass

def merge_dicts(*dict_args):
	'''
	Given any number of dicts, shallow copy and merge into a new dict,
	precedence goes to key value pairs in latter dicts.
	https://stackoverflow.com/questions/38987/how-can-i-merge-two-python-dictionaries-in-a-single-expression
	'''
	result = {}
	for dictionary in dict_args:
		result.update(dictionary)
	return result


def check_children(running, options):
	if options.check_children:
		for child in running:
			try:
				with open(os.path.join("/proc", str(child), "status")) as f:
					f
					pass
			except IOError as e:
				if e.errno != errno.ENOENT:
					raise
				print("child", child, "missing", running)

#def transform_files(mapping_info, src_dir, src_files, dest_dir):
#	for l in mapping_info:
#		mapping[l[0]] = l[1:]

def raiseit(e):
	raise e

def read_files(dir, suffixes, options, read_all_files):
	files = []
	dir = dir.rstrip('/')
	walk(dir, "", files, suffixes, options, read_all_files)
	return files

def walk(dir, extra, files, suffixes, options, read_all_files):
#	print "walk", dir, extra
	for dirpath, dirnames, filenames in os.walk(os.path.join(dir, extra), onerror=raiseit):
		dirpath_decoded = dirpath.decode('utf-8')
		filenames.sort()
		for f in filenames:
			if read_all_files or (os.stat(os.path.join(dirpath, f)).st_mode & options.file_permissions) == options.file_permissions:
				de = f.decode('utf-8')
				sub_dir, base = os.path.split(de)
				if not base.startswith(options.tmp_prefix):
					for suffix in suffixes:
						if len(base) > len(suffix) and base.endswith(suffix):
							head = base[:-len(suffix)]
							dtail = base[-len(suffix):]
							e0 = os.path.join(dirpath_decoded[len(dir) + 1:], sub_dir, head)
							files.append((e0, dtail))
							break

		readable_names = []
		for d in dirnames:
			path = os.path.join(dirpath, d)
			stat_buf = os.lstat(path)
#			if os.path.islink(path):
			if stat.S_ISLNK(stat_buf.st_mode):
				ex = path[len(dir) + 1:]
				if options.verbose:
					print("walk recusive", dir, ex, path)
				walk(dir, ex, files, suffixes, options, read_all_files)
			elif read_all_files or (stat_buf.st_mode & options.directory_permissions) == options.directory_permissions:
				readable_names.append(d)
		dirnames[:] = readable_names

def reap(done, ntasks, running, options):
	assert len(running)
	while True:
		check_children(running, options)
		assert len(running)
		try:
			pid, status = os.wait()
		except OSError as e:
			if e.errno == errno.ECHILD:
				print("wait failed with ECHILD with unacounted for children", str(running), file=sys.stderr)
			raise
		n = len(running)
		result = running.pop(pid, None)
		if result:
			assert len(running) + 1 == n
			if not ntasks or status:
				try:
					os.remove(result[0])
				except OSError as e:
					if e.errno != errno.ENOENT:
						raise(e)
			if ntasks:
				if not os.WIFEXITED(status):
					raise MyError("bad status for %s (%d)" % (result[1], status))
				if os.WEXITSTATUS(status):
					raise MyError("transform to %s failed (%d)" % (result[1], os.WEXITSTATUS(status)))
				if options.verbose:
					print("mv", result[0], result[1], file=sys.stderr)
				os.rename(result[0], result[1])
				if not options.quiet:
					done += 1
					n = str(ntasks)
					print("%*d/%s (%3.0f%%) %s" % (len(n), done, n, done * 100.0 / ntasks, result[1][-options.max_filename_characters:]))
			break
		else:
			raise MyError("unexpected child", pid, status)

def start_task(command, outfile, infiles, running, environment, user_options, options):
	dirname, base = os.path.split(outfile)
	otmp = os.path.join(dirname, options.tmp_prefix + base)

	env = environment.copy()
	for idx, infile in enumerate(infiles):
		env["i%d" % idx] = infile
	env["o"] = otmp

	c = [command[0]]
	for v, k in user_options.items():
		c.extend(["--%s" % v, k])
	c += command[1:]
	com = " ".join(c)

	if options.verbose:
		print(env, com)


	proc = subprocess.Popen(com, env=merge_dicts(os.environ, env), shell=True)
# keep the Popen object in scope otherwise its destructor will wait for the child
	running[proc.pid] = (otmp, outfile, proc)

class directory_maker():
	def __init__(self, options):
		self.options = options
		self.cache = set()
	def mkdir_for_file(self, file):
		self.mkdir(os.path.dirname(file))
	def mkdir(self, dir):
		n = len(self.cache)
		self.cache.add(dir)
		if len(self.cache) != n:
			try:
				os.stat(dir)
			except OSError:
				if self.options.verbose:
					print("mkdir -p", dir)
				os.makedirs(dir)

def execute_tasks(tasks, linked, environment, user_options, options):
	done = 0
	running = dict()
	ntasks = len(tasks)
	if not options.quiet:
		print(linked, "files linked,", ntasks, "tasks to run on", options.ncpus, "cpus")
	try:
		for task in tasks:
			if len(running) == options.ncpus:
				reap(done, ntasks, running, options)
				done += 1

			if options.dryrun:
				print(task)
			else:
				start_task(task[0], task[1], task[2], running, environment, user_options, options)

		while len(running):
			reap(done, ntasks, running, options)
			done += 1
	finally:
		while len(running):
			reap(-1, 0, running, options)

def insert(s, v):
	n = len(s)
	s.add(v)
	return n != len(s)

def delete(s, v):
	n = len(s)
	s.discard(v)
	return n != len(s)

def have_all_sources_for_pattern(suffixes, source, sources, options):
	for suffix in suffixes:
		if source.endswith(suffix):
			base = source[0:-len(suffix)]
			found = []
			for s in suffixes:
				possible = base + s
				if s != suffix:
					if possible not in sources:
						break
				found.append(possible)
			else:
				return base, found
	return None, None

def execute(source_filenames, target_filename, match, options):
	if options.verbose:
		print("run", target_filename, source_filenames)
	if options.touch:
		try:
			os.utime(target_filename)
			os.close(os.open(target_filename, os.O_WRONLY))
		except OSError as ex:
			if ex.errno != errno.ENOENT:
				raise
			os.close(os.open(target_filename, os.O_CREAT | os.O_WRONLY, 0o666))
		return []
	return [(match['command'], target_filename, source_filenames)]

def stat_path(fn, options):
	target_filename = os.path.join(fn)
	try:
		return os.stat(target_filename)
	except OSError as ex:
		if ex.errno != errno.ENOENT:
			raise
		return None

def lstat_path(fn, options):
	target_filename = os.path.join(fn)
	try:
		return os.lstat(target_filename)
	except OSError as ex:
		if ex.errno != errno.ENOENT:
			raise
		return None

def execute_if_required(source_basenames, target_filename, match, current, in_root, target_stat, options):
	source_filenames = []
	for source_basename in source_basenames:
		source_filenames.append(os.path.join(in_root, current, source_basename))

	source_stats = []
	for source_filename in source_filenames:
		source_stats.append(os.stat(source_filename))

	for source_stat in source_stats:
		if (stat.S_IMODE(source_stat.st_mode) & options.file_permissions) != options.file_permissions:
			if target_stat is not None:
				unlink(target_filename, options)
			return []

	if target_stat is None:
		return execute(source_filenames, target_filename, match, options)
	else:
		for source_stat in source_stats:
			if source_stat[stat.ST_MTIME] > target_stat[stat.ST_MTIME]:
				return execute(source_filenames, target_filename, match, options)
		return []

def mkdir(fn, options):
	if not options.dryrun:
		os.mkdir(fn)
	if options.verbose:
		print("mkdir", fn)

def unlink(fn, options):
	if not options.dryrun:
		os.unlink(fn)
	if options.verbose:
		print("rm", fn)

def rmdir(fn, options):
	if not options.dryrun:
		shutil.rmtree(fn)
	if options.verbose:
		print("rm -r", fn)

def handle_existing_directory(target_filename, options):
	try:
		t_stat = os.stat(target_filename)
	except OSError as ex:
		if ex.errno != errno.ENOENT:
			raise
		# dead link
		unlink(target_filename, options)
		mkdir(target_filename, options)
	else:
		if not stat.S_ISDIR(t_stat.st_mode):
			unlink(target_filename, options)
			mkdir(target_filename, options)

def want_directory(source_stat, allowed_directories, new_current, options):
	if allowed_directories and new_current not in allowed_directories:
		return False
	if (stat.S_IMODE(source_stat.st_mode) & options.directory_permissions) != options.directory_permissions:
		return False
	return True

def remaining_targets(targets, current, out_root, options):
	if not options.nodelete:
		for target in targets:
			path = os.path.join(out_root, current, target)
			try:
				unlink(path, options)
			except IsADirectoryError:
				rmdir(path, options)

def is_missing(fn, options):
	try:
		fd = os.open(fn, os.O_RDONLY)
	except FileNotFoundError:
		return True
	else:
		os.close(fd)
	return False

def transformer2(current, in_root, out_root, mapping, allowed_files, allowed_directories, options):
	tasks = []
	targets = set(os.listdir(os.path.join(out_root, current)))
	remaining = set()
	for fn in os.listdir(os.path.join(in_root, current)):
		new_current = os.path.join(current, fn)
		source_filename = os.path.join(in_root, current, fn)
		s_stat = os.stat(source_filename)

		if stat.S_ISDIR(s_stat.st_mode):
			if want_directory(s_stat, allowed_directories, new_current, options):
				target_filename = os.path.join(out_root, current, fn)
				if fn in targets:
					handle_existing_directory(target_filename, options)
					targets.remove(fn)
				else:
					mkdir(target_filename, options)
				tasks.extend(transformer2(new_current, in_root, out_root, mapping, allowed_files, allowed_directories, options))
		else:
			remaining.add(fn)

	done = set()
	for m in mapping:
		sources = remaining.copy()
		while sources:
			source = sources.pop()
			new_current = os.path.join(current, source)
			source_filename = os.path.join(in_root, current, source)
			s_stat = os.stat(source_filename)

			if not allowed_files or new_current in allowed_files:
				base, matched = have_all_sources_for_pattern(m['inputs'], source, sources, options)
				if matched:
					target = base + m['output']
					sources -= set(matched)
					remaining -= set(matched)
					if target not in done:
						done.add(target)
						target_filename = os.path.join(out_root, current, target)
						if target in targets:
							targets.remove(target)
							if is_missing(target_filename, options):
								unlink(target_filename, options) # remove dead link
								target_stat = None
							else:
								target_stat = os.lstat(target_filename)
						else:
							target_stat = None
						tasks.extend(execute_if_required(matched, target_filename, m, current, in_root, target_stat, options))
					elif target in targets:
						raise MyError("target is done but still in targets, target=%s done=%s targets=%s" % (target,done,targets))
	if targets & done:
		raise MyError("bad done=%s targets=%s" % (done, targets))
	remaining_targets(targets, current, out_root, options)
	return tasks


def count_cpus():
	n = 0;
	with open("/proc/cpuinfo") as f:
		for l in f:
			if l.lower().startswith("processor"):
				n += 1
	return n

def read_list(suffixes):
	files = []
	for line in sys.stdin.readlines():
		f = line.strip().decode('utf-8')
		sep = os.path.splitext(f)
		if sep[1] in suffixes:
			files.append(sep)
	return files

def make_file(fn, options):
	with open(fn, "w") as f:
		f.write("foo\n")
	return fn

def make_dir(dirname, options):
	try:
		os.mkdir(dirname, 0o777)
	except OSError as ex:
		if ex.errno != errno.EEXIST:
			raise

def create_test_files(source_dir, target_dir, options):
	results = []
	dirs = []
	make_file(os.path.join(source_dir, "x.cr2"), options)
	make_file(os.path.join(source_dir, "x.cr2.pp3"), options)
	results.append("x.jpg")
	dir_name = os.path.join(source_dir, "d")
	os.makedirs(dir_name, exist_ok=True)
	dirs.append("d")
	make_file(os.path.join(dir_name, "y.cr2"), options)
	results.append(os.path.join("d", "y.jpg"))

	if options.file_permissions:
		os.chmod(make_file(os.path.join(source_dir, "noperm.cr2"), options), 0o666 & ~options.file_permissions)

	make_file(os.path.join(target_dir, "bad.txt2"), options)
	make_dir(os.path.join(target_dir, "bad"), options)
	return (results, dirs)

def main(argv):
	transform = (
		([".cr2", ".cr2.pp3"], ".jpg", ["cr2-to-jpeg", "-o"]),
		([".cr2"], ".jpg", ["cr2-to-jpeg", "-o"]),
		([".jpg", ".jpg.pp3"], ".jpg", ["cr2-to-jpeg", "-o"]),
		([".png", ".png.pp3"], ".jpg", ["cr2-to-jpeg", "-o"]),
		([".pcd"], ".jpg", ["pcd-to-jpeg", "--output"]),
		([".flac"], ".ogg", ["oggenc", "--quiet", "--quality=5", "-o"]),
		([".jpg"], ".jpg", ["resize-jpeg", "--output"]),
		([".png"], ".jpg", ["png-to-jpeg", "--output"])
	)
	link = [ ".mp3", ".mov" ]

	parser = optparse.OptionParser(usage="usage: %prog [--help] [options] source_dir target_dir")
	parser.set_defaults(check_children=False)
	parser.disable_interspersed_args()
	parser.add_option("-v", "--verbose", action="store_true", help="verbose messages")
	parser.add_option("-n", "--dryrun", action="store_true", help="dryrun")
	parser.add_option("-i", "--interactive", action="store_true", help="interactive mode")
	parser.add_option("-l", "--list", action="store_true", help="read list from stdin")
	parser.add_option("--touch", action="store_true", help="touch rather than running command")
	parser.add_option("--nodelete", action="store_true", help="do not delete any files")
	parser.add_option("-D", "--delete", action="store_true", help="delete old files")
	parser.add_option("--max_filename_characters", type="int", default=60, metavar="length", help="maximum number characters of the file name to print [%default]")
	parser.add_option("-C", "--delete_sleep", action="store_true", help="delete old files after sleep")
	parser.add_option("-q", "--quiet", action="store_true",help="silence [%default]")
	parser.add_option("--test", action="store_true",help="create files and test [%default]")
	parser.add_option("--check_children", action="store_true", dest="check_children", help="check all children are alive [%default]")
	parser.add_option("--no_check_children", action="store_false", dest="check_children", help="do not check all children are alive [%default]")
	parser.add_option("-p", "--tmp_prefix", default="#", help="prefix for temporary files [%default]")
	parser.add_option("-t", "--target_dir", default=None, help="target directory")
	parser.add_option("-c", "--config", default=None, help="YAML config file")
	parser.add_option("-s", "--source_dir", default=None, help="source directory")
	parser.add_option("--ncpus", default=1, type='int', help="number of cpus to use [%default]")
	parser.add_option("-F", "--file_permissions", default=0o640, type='int', help="files must have at least these permissions [%default]")
	parser.add_option("--directory_permissions", default=0o750, type='int', help="directories must have at least these permissions [%default]")
	(options, args) = parser.parse_args()

	if options.ncpus <= 0:
		print("must have at least 1 cpu", file=sys.stderr)
		sys.exit(1)

	if options.config:
		with open(options.config) as f:
			config = yaml.safe_load(f)
	else:
		sys.exit('mustr have a config g=file at the moment')

	source_dir = options.source_dir
	if len(args) >= 1:
		source_dir = args[0]

	target_dir = options.target_dir
	if len(args) >= 2:
		target_dir = args[1]

	if len(args) > 2:
		parser.error("too many arguments")

	if options.test:
		source_dir_tmp = tempfile.TemporaryDirectory()
		source_dir = source_dir_tmp.name
		target_dir_tmp = tempfile.TemporaryDirectory()
		target_dir = target_dir_tmp.name
		test_files, test_dirs = create_test_files(source_dir, target_dir, options)

	if not source_dir:
		parser.error("must supply a source directory")
	if not target_dir:
		parser.error("must supply a target directory")


	if options.list:
		mapping = list(transform)
		input_suffixes = frozenset([f[0] for f in mapping])
		for i in link:
			mapping.append((i, i, None))
		in_files = read_list(input_suffixes)
	else:
		in_files = None

#	out_files = read_files(options.target_dir, set([f[1] for f in mapping]), options, True)

	if options.verbose:
		print("using", options.ncpus, "cpus")

	tasks = transformer2("", source_dir, target_dir, config['transformations'], in_files, None, options)
	execute_tasks(tasks, 0, config['environment'], config['options'], options)
	if options.test:
		for f in test_files:
			os.unlink(os.path.join(target_dir, f))
		for d in test_dirs:
			os.rmdir(os.path.join(target_dir, d))
	if options.interactive:
		print("hit return to exit ", end=' ')
		sys.stdin.readline()
	sys.exit(0)

if __name__ == "__main__":
	try:
		main(sys.argv)
	except MyError as e:
		print(os.path.basename(sys.argv[0]) + ":", str(e), file=sys.stderr)
		sys.exit(1)
