#!/usr/bin/python3
# pcd-to-jpeg-rawtherapee Copyright (c) 2013 Stuart Pook (http://www.pook.it/)
# convert a pcd image to jpeg using ImageMagik
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
import os
import optparse
import sys
import subprocess

def strip_end(text, suffix):
	if not text.endswith(suffix):
		return text
	return text[:-len(suffix)]

def myname():
	return os.path.basename(sys.argv[0])

def main():
	parser = optparse.OptionParser(usage="usage: %prog [options] inputfile.pcd")
	parser.disable_interspersed_args()
	parser.add_option("-o", "--output", help="output file [%default]")
	parser.add_option("-v", "--verbose", action="store_true", help="verbose")
	parser.add_option("-s", "--size", help="output image size [%default]")
	parser.add_option("-q", "--quality", default="80", help="output image quality [%default]")
	(options, args) = parser.parse_args()
	if len(args) != 1:
		parser.error("must supply 1 arguments")
	input = args[0]

	if os.path.splitext(input)[1] != ".pcd":
		parser.error("need a PCD file as input")

	size = options.size
	quality = options.quality
	if options.output:
		output = options.output
		root = output.split('/', 1)[0]
		try:
			size, quality = root.split("-")
		except ValueError:
			sys.exit(os.path.basename(sys.argv[0]) + ": top directory name must be in the form XX-YY, found: " + root)
		if size.find("x") == -1:
			size = None
	else:
		output = None

	command = ["convert" , "-quality", quality]
	if size:
		command.extend(["-resize", size])
	command.append(args[0] + "[5]")
	if output:
		command.append(output)

	if options.verbose:
		print(" ".join(command))

	subprocess.check_call(command)

if __name__ == "__main__":
	main()
