#!/usr/bin/python3
# sync-photos-nexus7 Copyright (c) 2013 Stuart Pook (http://www.pook.it/)
# Send the correct photos to my nexus 7.
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import optparse
import os
import subprocess
import shlex
import sys

def verbose(options, *args):
	if options.verbose:
		print(*args, file=sys.stderr)

def has_file(dirname, fn, machine, options):
	cmd = ["ssh", "-o", "BatchMode=yes", machine, "ls", dirname]
	dirs = subprocess.Popen(cmd, stdout=subprocess.PIPE, universal_newlines=True)
	try:
		for line in dirs.stdout:
			if line.strip() == fn:
				return True
		return False
	finally:
		if dirs.wait() != 0:
			sys.exit("cmd failed " + " ".join(cmd))

def check_call(cmd, options):
	verbose(options, " ".join(shlex.quote(c) for c in cmd))
	if not options.norun:
		subprocess.check_call(cmd)

def main():
	parser = optparse.OptionParser(usage="usage: %prog [options] [--help] [machine]")
	parser.add_option("--machine", default="windy", help="where to send to [%default]")
	parser.add_option("--dest_root", default="/storage", help="destination directory [%default]")
	parser.add_option("--dest_subdir", default="Stuart_Pook/rsync", help="destination directory [%default]")
	parser.add_option("-v", "--verbose", action="store_true", help="verbose")
	parser.add_option("-n", "--norun", action="store_true", help="don't run the rsync")
	parser.add_option("-S", "--size", help="size [%default]")
	parser.add_option("--rsync-path", default=None, help="remote rsync path [%default]")
	parser.add_option("--size-only", action="store_const", const="--size-only", dest="compare")
	parser.add_option("--times", action="store_const", const="--times", default="--size-only", dest="compare")
	(options, args) = parser.parse_args()

	if len(args) > 1:
		parser.error("only 1 argument allowed")
	machine = args[0] if len(args) else options.machine
	size = options.size if options.size else machine

	source = subprocess.check_output(["transform2", "--print_outdir", size], universal_newlines=True).strip()
	f1 = "sdcard1"
	if not has_file(options.dest_root, f1, machine, options):
		f1 = "sdcard0"
	dest = os.path.join(options.dest_root, f1, options.dest_subdir)

	cmd = ["rsync"]
	if options.rsync_path:
		cmd.append("--rsync-path=" + options.rsync_path)
	cmd.extend(["--exclude", "#*"])
	cmd.append("--copy-unsafe-links")
	cmd.append(options.compare)
	cmd.append("--delete")
	cmd.append("--recursive")
	cmd.append("-P")
	cmd.append(source + "/")
	cmd.append(machine + ":" + os.path.join(dest, "photos/"))
	check_call(cmd, options)
	# https://stackoverflow.com/questions/17928576/refresh-android-mediastore-using-adb
	check_call(["ssh", "-n", machine, "am broadcast -a android.intent.action.MEDIA_MOUNTED", "-d", "file:///mnt/media_rw/" + f1], options)

if __name__ == "__main__":
	main()
