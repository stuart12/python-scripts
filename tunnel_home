#!/usr/bin/python2.5
# tunnel_home, Copyright (c) 2012 Stuart Pook (http://www.pook.it/)
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
from __future__ import with_statement

import os, optparse, sys, subprocess, socket, pipes, time, signal

class MyError(Exception):
	pass

def print_command(command, options):
	if options.verbose:
		print " ".join(pipes.quote(f) for f in command)
		
def get_forwards(options):
	forwards = []
	p = subprocess.Popen([options.redirect, "--list"], stdout=subprocess.PIPE)
	for l in p.stdout:
		words = l.split()
		if len(words) != 2:
			raise MyError(options.redirect + " gave bad output " + l)
		forwards.append(words)
	p.stdout.close()
	if p.wait() != 0:
		raise MyError(options.redirect + " failed " + p.return_code)
	return forwards

def main():
	ports = [ 80,
		22, 445, 444, 563, 110, 8080, 993, 20, 21,
		23, 220, 5061, 5000, 5001, 5050, 5100, 5101,
		5060, 1352, 1293, 3389, 5900, 5800, 2401
	]
	parser = optparse.OptionParser()
	parser.disable_interspersed_args()
	
	parser.add_option("-H", "--host", help = "host to connect to [%default]", default="sftp")
	parser.add_option("-v", "--verbose", action="store_true")
	parser.add_option("-t", "--timeout", type='int', default=20, help="ssh timeout [%default]")
	parser.add_option("-f", "--fake", action="store_true", help="do not do iptables")
	parser.add_option("-u", "--unused", action="store_true", help="try a unused port first")
	parser.add_option("-r", "--redirect", help = "redirect command [%default]", default="redirect_home")

	(options, args) = parser.parse_args()
	
	forwards = get_forwards(options)
	
	if options.unused:
		ports = [81] + ports
	
	ssh_base = ["ssh", "-NnaxT",
		"-o", "ControlMaster=yes",
		"-o", "ExitOnForwardFailure=yes",
		"-o", "PermitLocalCommand=yes",
		"-o", "LocalCommand=echo ok",
		"-o", "ConnectTimeout=%d" % options.timeout]
	for p in forwards:
		ssh_base.extend(["-L", "%s:localhost:%s" % (p[1], p[0])])
		
	for port in ports:
		ssh_command = ssh_base + ["-p", str(port), options.host]
		if options.verbose:
			print_command(ssh_command, options)
		ssh = subprocess.Popen(ssh_command, stdout=subprocess.PIPE)
		
		reply = ssh.stdout.readline()
		if reply.strip() == "ok":
			break
		ssh.wait()
	else:
		raise MyError("no connections got through during the %d second timeout" %  options.timeout)
	
	if options.fake:
		redirect_command = ["sh", "-c", "echo fake; read r; echo faked; exit 0"]
	else:
		redirect_command = ["sudo", options.redirect]
		if options.verbose:
			redirect_command.append("--verbose")
			print_command(redirect_command, options)

	redirect = subprocess.Popen(redirect_command, stdin=ssh.stdout)
	
	time.sleep(1)
	print "hit return to exit ",
	sys.stdin.readline()
	os.kill(ssh.pid, signal.SIGTERM)
	ssh.wait()
	
	if redirect.wait():
		print >> sys.stderr, os.path.basename(sys.argv[0]) + ":", redirect_command[0], "failed"
		
	return redirect.returncode
	
if __name__ == "__main__":
	sys.exit(main())
