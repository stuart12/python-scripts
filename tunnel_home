#!/usr/bin/python2.5
# tunnel_home Copyright (c) 2012 Stuart Pook (http://www.pook.it/)
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
from __future__ import with_statement

import os, optparse, sys, subprocess, socket, pipes

def print_command(command, options):
	if options.verbose:
		print " ".join(pipes.quote(f) for f in command)

def main():
	parser = optparse.OptionParser()
	parser.disable_interspersed_args()
	
	parser.add_option("-H", "--host", help = "host to connect to [%default]", default="sftp")
	parser.add_option("-v", "--verbose", action="store_true", dest="verbose", default=False)
	
	(options, args) = parser.parse_args()
	
	forwards = [ "imap", "submission" ]
	ssh_command = ["ssh", "-NnaxT", "-o", "ExitOnForwardFailure=yes" ]
	for p in forwards:
		port = socket.getservbyname(p, "tcp")
		ssh_command.extend(["-L", "%d:localhost:%s" % (10000 + port, port)])
	ssh_command.append(options.host)
	if options.verbose:
		print_command(ssh_command, options)
		
	ssh = subprocess.Popen(ssh_command, stdout=subprocess.PIPE)
	
	redirect_command = ["sudo", "redirect_home"]
	if options.verbose:
		redirect_command.append("--verbose")
		print_command(redirect_command, options)

	redirect = subprocess.Popen(redirect_command, stdin=ssh.stdout)
	
	if ssh.wait():
		print >> sys.stderr, os.path.basename(sys.argv[0]) + ":", ssh_command[0], "failed"
	if redirect.wait():
		print >> sys.stderr, os.path.basename(sys.argv[0]) + ":", redirect_command[0], "failed"
		
	return ssh.returncode + redirect.returncode
	
if __name__ == "__main__":
	sys.exit(main())
