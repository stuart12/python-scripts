#!/usr/bin/python3
# convert-all-photos Copyright (c) 2012 Stuart Pook (http://www.pook.it/)
# convert all my CR2 (RAW) photos into JPEGs at all required resolutions
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import optparse
import os
import subprocess
import sys

def main():
	parser = optparse.OptionParser(usage="usage: %prog [options] [--help] [<size> ...]")
	parser.add_option("-t", "--target_dir", default=os.path.expanduser("~/ws/converted-photos"), help="target directory [%default]")
	parser.add_option("-s", "--source_dir", default=os.path.expanduser("~/photos"), help="source directory [%default]")
	parser.add_option("-v", "--verbose", action="store_true", help="verbose")
	parser.add_option("-q", "--quiet", action="store_true", help="quiet")
	parser.add_option("-n", "--dryrun", action="store_true", help="dryrun")
	parser.add_option("--nice", type='int', default=8, help="nice [%default]")
	parser.add_option("-c", "--ncpus", type='int', default=2, help="number of cpus to use [%default]")
	(options, args) = parser.parse_args()

	print(os.path.basename(sys.argv[0]) + ":", "cd", options.target_dir)
	os.chdir(options.target_dir)

	dirs = os.listdir(".")
	start = ["transform", "--delete", "--max_filename_characters=64" ]
	if options.ncpus:
		start.append("--ncpus=%d" % options.ncpus)
	if options.quiet:
		start.append("--quiet")
	if options.dryrun:
		start.append("--dryrun")
	if options.verbose:
		print(dirs)
		start.append("--verbose")

	start.append("--file_permissions=040")
	start.append("--directory_permissions=050")

	os.nice(options.nice)
	to_do = frozenset(args)
	for d in dirs:
		if not d.endswith(".old") and (len(to_do) == 0 or d in to_do):
			command = start + [ options.source_dir, d]
			print(os.path.basename(sys.argv[0]) + ":", " ".join(command))
			subprocess.check_call(command)

if __name__ == "__main__":
	main()
