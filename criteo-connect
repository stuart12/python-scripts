#!/usr/bin/python3 -B
# use vpnc-connect to create a vpn in a network namespace
# Copyright (c) 2019, 2020 Stuart Pook (http://www.pook.it/)
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
import os
import sys
import signal
import argparse
import getpass
import subprocess
import logging

def check(cmd):
    logging.debug("check_call %s", " ".join(cmd))
    subprocess.check_call(cmd)

def run(cmd, **kargs):
    logging.debug("call %s", " ".join(cmd))
    subprocess.call(cmd, **kargs)

def set_forwarding(control_file, value, sudo):
    logging.debug("setting %s to %s", control_file, value)
    with open(control_file, "w") as fp:
        fp.write(value + '\n')

def mkdir(d):
    if not os.path.exists(d):
        logging.debug(f"mkdir {d}")
        os.umask(0o22)
        os.mkdir(d)

def setup_dns(ns, dns):
    with open("/etc/resolv.conf") as fp:
        nameservers = [line.split()[1] for line in fp for f in (line.split(), ) if len(f) == 2 and f[0] == 'nameserver'][:2] + [dns]
    netns = "/etc/netns"
    directory = os.path.join("/etc/netns", ns)
    dest = os.path.join(directory, "resolv.conf")
    logging.debug(f"write nameservers {' '.join(nameservers)} to {dest}")
    mkdir(netns)
    mkdir(directory)
    with open(dest, "w") as fp:
        for line in [f"nameserver {n}\n" for n in nameservers]:
            fp.write(line + "\n")

def default_interface():
    routes = "/proc/net/route"
    with open(routes) as fp:
        for line in fp:
            fields = line.split()
            if len(fields) > 2 and fields[1] == "00000000":
                return fields[0]
    logging.fatal(f"no default route found in {routes}")
    sys.exit(1)

def main():
    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter,
            description="open a vpn to criteo")

    parser.set_defaults(loglevel='warn')
    parser.add_argument("-v", "--verbose", dest='loglevel', action="store_const", const='debug', help="debug loglevel")
    parser.add_argument("-l", "--loglevel", metavar="LEVEL", help="set logging level")
    parser.add_argument("--nsname", default="namespacevpn", help="network namespace name")
    parser.add_argument("--sudo", default="sudo", help="comment to become root")
    parser.add_argument("--network", default="192.168.42", help="network to use")
    parser.add_argument("--wan", default=default_interface(), help="externel network interface")
    parser.add_argument("--config", default="criteo-prod", help="name of vpnc-connect config")
    parser.add_argument("--dns", default='10.239.248.1', help="DNS server to use for VPN")
    parser.add_argument("--forward", default="/proc/sys/net/ipv4/ip_forward", help="file controlling forwarding")
    #parser.add_argument("-D", "--delete", action='store_true', help="delete the net namespace before starting")
    parser.add_argument("--dryrun", action='store_true', help="start bash not vpnc-connect")
    parser.add_argument("--iptables", default='iptables-legacy', help="iptables command")

    parser.add_argument('command', nargs=argparse.REMAINDER, help='command to run')

    options = parser.parse_args()
    numeric_level = getattr(logging, options.loglevel.upper(), None)
    logging.basicConfig(level=numeric_level)

# http://hintcafe.net/post/78293519027/running-a-process-inside-a-network-namespace
# https://unix.stackexchange.com/questions/257510/port-forwarding-to-application-in-network-namespace-with-vpn
    ns = options.nsname
    ns0 = ns + "x0"
    ns1 = ns + "x1"
    net = options.network + "."
    wan = options.wan
    iptables = options.iptables
    command = options.command[1:] if len(options.command) > 1 and options.command[0] == '--' else options.command
    if command:
        logging.debug("command: %s", command)
        run(["ip", "netns", "exec", ns,
            "sudo", "-u", os.getenv('SUDO_USER'),
            *command])
    else:
        if subprocess.run(['test', '-f', os.path.join('/var/run/netns', ns)]).returncode == 0:
            check(["ip", "netns", "delete", ns])
            check(["ip", "link", "delete", ns0])
        with open(options.forward) as fwd:
            forwarding = fwd.read().strip()
        logging.debug("forwarding %s", forwarding)
        try:
            setup_dns(ns, options.dns)
            check(["ip", "netns", "add", ns])
            check(["ip", "link", "add", ns0, "type", "veth", "peer", ns1])
            check(["ip", "link", "set", ns1, "netns", ns])
            check(["ifconfig", ns0, net + "1", "netmask", "255.255.255.0", "up" ])
            check(["ip", "netns", "exec", ns, "ifconfig", ns1, net + "2", "netmask", "255.255.255.0", "up"])
            check(["ip", "netns", "exec", ns, "ip", "link", "set", "lo", "up"])
            check(["ip", "netns", "exec", ns, "route", "add", "default", "gw", net + "1"])
            check([iptables, "-t", "nat", "-A", "POSTROUTING", "-s", net + "0/24", "-o", wan, "-j", "MASQUERADE"])
            check([iptables, "-A", "INPUT", "--in-interface", ns0, "--jump", "ACCEPT"])
            check([iptables, "-A", "FORWARD", "--in-interface", ns0, "--jump", "ACCEPT"])
            if forwarding == "0":
                set_forwarding(options.forward, "1", sudo)
            # https://www.ipredator.se/static/downloads/howto/linux_router/ferm.conf
            signal.signal(signal.SIGINT, signal.SIG_IGN)
            print("press Control-C to quit")
            if options.dryrun:
                script = ["bash"]
            else:
                if numeric_level == logging.DEBUG:
                    script = ["/bin/sh", "-xc", f"vpnc-connect --script '/bin/sh -x /usr/share/vpnc-scripts/vpnc-script' {options.config}"]
                else:
                    script = ["vpnc-connect", options.config]
            run(["ip", "netns", "exec", ns] + script)
            signal.signal(signal.SIGINT, signal.SIG_DFL)
            check([iptables, "-t", "nat", "-D", "POSTROUTING", "-s", net + "0/24", "-o", wan, "-j", "MASQUERADE"])
            check([iptables, "-D", "INPUT", "--in-interface", ns0, "--jump", "ACCEPT"])
            check([iptables, "-D", "FORWARD", "--in-interface", ns0, "--jump", "ACCEPT"])
            check(["ip", "netns", "delete", ns])
            check(["ip", "link", "delete", ns0])
        finally:
            if forwarding == "0":
                set_forwarding(options.forward, "0", sudo)

if __name__ == "__main__":
    main()
