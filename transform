#!/usr/bin/python2.5
# transform Copyright (c) 2012 Stuart Pook (http://www.pook.it/)
# transform all the files in a directory using a set of rules
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# must work with python 2.5
from __future__ import with_statement

import os, optparse, sys, subprocess, time

class MyError(Exception):
	pass

def transform_files(mapping_info, src_dir, src_files, dest_dir):
	for l in mapping_info:
		mapping[l[0]] = l[1:]
		
def raiseit(e):
	raise e
		
def read_files(dir, suffixes):
	files = []
	dir = dir.rstrip('/')
	for dirpath, dirname, filenames in os.walk(dir, onerror=raiseit):
		for f in filenames:
			l = os.path.splitext(f.decode('utf-8'))
			if l[1] in suffixes:
				files.append((os.path.join(dirpath[len(dir) + 1:], l[0]), l[1]))
	return files
	
def reap(done, ntasks, running, options):
	while True:
		pid, status = os.wait()
		result = running.get(pid)
		if result:
			del running[pid]
			if not ntasks or status:
				os.remove(result[0])
			if ntasks:
				if status != 0:
					myname = os.path.basename(sys.argv[0])
					if os.WIFEXITED(status):
						raise MyError("%s: transform to %s failed (%d)" % (myname, result[1], os.WEXITSTATUS(status)))
					raise MyError("%s: bad status for %s (%d)" % (myname, result[1], status))
				if options.verbose:
					print >> sys.stderr, "mv", result[0], result[1]
				os.rename(result[0], result[1])
				if not options.quiet:
					done += 1
					n = str(ntasks)
					print "%*d/%s (%3.0f%%)" % (len(n), done, n, done * 100.0 / ntasks), os.path.basename(result[1])
			break

def start_task(command, in_file, out_file, directories, options):
	directories.mkdir_for_file(out_file)			
	if options.verbose:
		print command, '<', in_file, '>', out_file
	return subprocess.Popen(command, stdin = open(in_file), stdout=open(out_file, "w"))
	
class directory_maker():
	def __init__(self, options):
		self.options = options
		self.cache = set()
	def mkdir_for_file(self, file):
		dir = os.path.dirname(file)
		n = len(self.cache)
		self.cache.add(dir)
		if len(self.cache) != n:
			try:
				os.stat(dir)
			except OSError:
				if self.options.verbose:
					print "mkdir -p", dir
				os.makedirs(dir)
	
def execute_tasks(tasks, map, options, directory_cache, linked):
	done = 0
	running = dict()
	ntasks = len(tasks)
	if not options.quiet:
		print linked, "files linked,", ntasks, "tasks to run on", options.ncpus, "cpus"
	try:
		for task in tasks:
			if len(running) == options.ncpus:
				reap(done, ntasks, running, options)
				done += 1
				
			otmp = task[2] + ".tmp"
			proc = start_task(task[0], task[1], otmp, directory_cache, options)
			running[proc.pid] = (otmp, task[2])

		while len(running):
			reap(done, ntasks, running, options)
			done += 1
	finally:
		while len(running):
			reap(-1, 0, running, options)

def delete(s, v):
	n = len(s)
	s.discard(v)
	return n != len(s)

def transformer(in_files, out_files, mapping, options):
	map = dict([[l[0], l[1:]]  for l in mapping])
	out_set = set(out_files)
	directory_cache = directory_maker(options)
	
	linked = 0
	tasks = []
	for in_file in in_files:
		instruction = map[in_file[1]]
		out_file = (in_file[0], instruction[0])
		infile = os.path.join(options.source_dir, in_file[0] + in_file[1])
		try:
			outfile = os.path.join(options.target_dir, out_file[0] + out_file[1])
		except UnicodeDecodeError:
			print  >> sys.stderr, out_file
			raise
		if not delete(out_set, out_file) or os.path.getmtime(infile) > os.path.getmtime(outfile):
			command = instruction[1]
			if command:
				tasks.append((command, infile, outfile))
			else:
				if options.verbose:
					print "ln", infile, outfile
				directory_cache.mkdir_for_file(outfile)
				os.link(infile, outfile)
				linked += 1

	execute_tasks(tasks, map, options, directory_cache, linked)
	if options.delete or options.delete_sleep:
		if options.verbose:
			print len(out_set), "files to delete"
		for out in out_set:
			f = os.path.join(options.target_dir, out[0] + out[1])
			if not options.quiet:
				print "rm", f
			if options.delete_sleep:
				time.sleep(4)
			os.remove(f)
			

def count_cpus():
	n = 0;
	with open("/proc/cpuinfo") as f:
		for l in f:
			if l.lower().startswith("processor"):
				n += 1
	return n
	
def read_list(suffixes):
	files = []
	for line in sys.stdin.readlines():
		f = line.strip()
		sep = os.path.splitext(f)
		if sep[1] in suffixes:
			files.append(sep)
	return files

def main(argv):
	transform = (
		(".cr2", ".jpg", ("cr2-to-jpeg")),
		(".flac", ".ogg", ("oggenc", "--quiet", "--quality=5", "-"))
	)
	link = [ ".mp3" ]
	
	parser = optparse.OptionParser(usage="usage: %prog [options] source_dir target_dir")
	parser.disable_interspersed_args()	
	parser.add_option("-v", "--verbose", action="store_true", help="verbose message")
	parser.add_option("-i", "--interactive", action="store_true", help="interactive mode")
	parser.add_option("-l", "--list", action="store_true", help="read list from stdin")
	parser.add_option("-D", "--delete", action="store_true", help="delete old files")
	parser.add_option("-C", "--delete_sleep", action="store_true", help="delete old files after sleep")
	parser.add_option("-q", "--quiet", action="store_false", default=False, help="silence")
	parser.add_option("-t", "--target_dir", default=None, help="target directory")
	parser.add_option("-s", "--source_dir", default=None, help="source directory")
	parser.add_option("--ncpus", default = count_cpus(), type='int', help="number of cpus to use [%default]")
	(options, args) = parser.parse_args()
			
	if options.ncpus <= 0:
		print >> sys.stderr, "must have at least 1 cpu"
		sys.exit(1)
		
	mapping = list(transform)
	for i in link:
		mapping.append((i, i, None))

	
	i = 0
	if options.source_dir == None:
		if i == len(args):
			parser.error("must supply an argument for source_dir")
			sys.exit(1)
		options.source_dir = args[i]
		i += 1
	if options.target_dir == None:
		if i == len(args):
			parser.error("must supply an argument for target_dir " + str(args))
			sys.exit(1)
		options.target_dir = args[i]
		i += 1
	if i != len(args):
		parser.error("too many arguments: " + str(args))
		sys.exit(1)
	
	input_suffixes = frozenset([f[0] for f in mapping])
	if options.list:
		in_files = read_list(input_suffixes)
	else:
		in_files = read_files(options.source_dir, input_suffixes)
		
	out_files = read_files(options.target_dir, set([f[1] for f in mapping]))
	
	if options.verbose:
		print "using", options.ncpus, "cpus"
		print len(in_files), "source files,", len(out_files), "target files"
	
	transformer(in_files, out_files, mapping, options)
	if options.interactive:
		print "hit return to exit ",
		sys.stdin.readline()
	sys.exit(0)
	
if __name__ == "__main__":
	main(sys.argv)
