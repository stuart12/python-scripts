#!/usr/bin/python2.5 -u
# transform Copyright (c) 2012 Stuart Pook (http://www.pook.it/)
# transform all the files in a directory using a set of rules
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# must work with python 2.5

# should remove empty directories

from __future__ import with_statement

import os, optparse, sys, subprocess, time
import errno
import pipes
import stat

class MyError(Exception):
	pass
	
def check_children(running, options):
	if options.check_children:
		for child in running:
			try:
				with open(os.path.join("/proc", str(child), "status")) as f:
					pass
			except IOError, e:
				if e.errno != errno.ENOENT:
					raise
				print "child", child, "missing", running

def transform_files(mapping_info, src_dir, src_files, dest_dir):
	for l in mapping_info:
		mapping[l[0]] = l[1:]
		
def raiseit(e):
	raise e
		
def read_files(dir, suffixes, options, read_all_files):
	files = []
	dir = dir.rstrip('/')
	walk(dir, "", files, suffixes, options, read_all_files)
	return files
	
def walk(dir, extra, files, suffixes, options, read_all_files):
#	print "walk", dir, extra
	for dirpath, dirnames, filenames in os.walk(os.path.join(dir, extra), onerror=raiseit):
		dirpath_decoded = dirpath.decode('utf-8')
		filenames.sort()
		for f in filenames:
			if read_all_files or (os.stat(os.path.join(dirpath, f)).st_mode & options.file_permissions) == options.file_permissions:
				de = f.decode('utf-8')
				sub_dir, base = os.path.split(de)
				if not base.startswith(options.tmp_prefix):
					for suffix in suffixes:
						if len(base) > len(suffix) and base.endswith(suffix):
							head = base[:-len(suffix)]
							dtail = base[-len(suffix):]
							e0 = os.path.join(dirpath_decoded[len(dir) + 1:], sub_dir, head)
							files.append((e0, dtail))
							break
						
		readable_names = []
		for d in dirnames:
			path = os.path.join(dirpath, d)
			stat_buf = os.lstat(path)
#			if os.path.islink(path):
			if stat.S_ISLNK(stat_buf.st_mode):
				ex = path[len(dir) + 1:]
				if options.verbose:
					print "walk recusive", dir, ex, path
				walk(dir, ex, files, suffixes, options, read_all_files)
			elif read_all_files or (stat_buf.st_mode & options.directory_permissions) == options.directory_permissions: 
				readable_names.append(d)
		dirnames[:] = readable_names
	
def reap(done, ntasks, running, options):
	assert len(running)
	while True:
		check_children(running, options)
		assert len(running)
		try:
			pid, status = os.wait()
		except OSError, e:
			if e.errno == errno.ECHILD:
				print >> sys.stderr, "wait failed with ECHILD with unacounted for children", str(running)
			raise
		n = len(running)
		result = running.pop(pid, None)
		if result:
			assert len(running) + 1 == n
			if not ntasks or status:
				try:
					os.remove(result[0])
				except OSError, e:
					if e.errno != errno.ENOENT:
						raise(e)
			if ntasks:
				if not os.WIFEXITED(status):
					raise MyError("bad status for %s (%d)" % (result[1], status))
				if os.WEXITSTATUS(status):
					raise MyError("transform to %s failed (%d)" % (result[1], os.WEXITSTATUS(status)))
				if options.verbose:
					print >> sys.stderr, "mv", result[0], result[1]
				os.rename(result[0], result[1])
				if not options.quiet:
					done += 1
					n = str(ntasks)
					print "%*d/%s (%3.0f%%) %s" % (len(n), done, n, done * 100.0 / ntasks, result[1][-options.max_filename_characters:])
			break
		else:
			raise MyError("unexpected child", pid, status)

def start_task(command, infile, outfile, running, directory_cache, options):
	dir, base = os.path.split(outfile)
	otmp = os.path.join(dir, options.tmp_prefix + base)
	directory_cache.mkdir(dir)
	c = command + [otmp, infile]
	if options.verbose:
		print " ".join(pipes.quote(a) for a in c)

	proc = subprocess.Popen(c)
# keep the Popen object in scope otherwise its destructor will wait for the child
	running[proc.pid] = (otmp, outfile, proc)
	
class directory_maker():
	def __init__(self, options):
		self.options = options
		self.cache = set()
	def mkdir_for_file(self, file):
		self.mkdir(os.path.dirname(file))
	def mkdir(self, dir):
		n = len(self.cache)
		self.cache.add(dir)
		if len(self.cache) != n:
			try:
				os.stat(dir)
			except OSError:
				if self.options.verbose:
					print "mkdir -p", dir
				os.makedirs(dir)
	
def execute_tasks(tasks, map, options, directory_cache, linked):
	done = 0
	running = dict()
	ntasks = len(tasks)
	if not options.quiet:
		print linked, "files linked,", ntasks, "tasks to run on", options.ncpus, "cpus"
	try:
		for task in tasks:
			if len(running) == options.ncpus:
				reap(done, ntasks, running, options)
				done += 1
			
			if options.dryrun:
				print task
			else:
				start_task(task[0], task[1], task[2], running, directory_cache, options)

		while len(running):
			reap(done, ntasks, running, options)
			done += 1
	finally:
		while len(running):
			reap(-1, 0, running, options)

def insert(s, v):
	n = len(s)
	s.add(v)
	return n != len(s)

def delete(s, v):
	n = len(s)
	s.discard(v)
	return n != len(s)

def transformer(in_files, out_files, mapping, options):
	map = dict([[l[0], l[1:]]  for l in mapping])
	out_set = frozenset(out_files)
	directory_cache = directory_maker(options)
	creating = set()
	needed = set()
	
	linked = 0
	tasks = []
	for in_file in in_files:
		instruction = map[in_file[1]]
		out_file = (in_file[0], instruction[0])
		needed.add(out_file)
#		print(in_file, out_file)
		if out_file not in creating:
			infile = os.path.join(options.source_dir, in_file[0] + in_file[1])
			try:
				outfile = os.path.join(options.target_dir, out_file[0] + out_file[1])
			except UnicodeDecodeError:
				print >> sys.stderr, out_file
				raise
			if out_file not in out_set or os.path.getmtime(infile) > os.path.getmtime(outfile):
				creating.add(out_file)
				command = instruction[1]
#				print("adding", out_file, infile, outfile)
				if command:
					tasks.append((command, infile, outfile))
				else:
					directory_cache.mkdir_for_file(outfile)
					try:
						os.link(infile, outfile)
						if options.verbose:
							print "ln", pipes.quote(infile), pipes.quote(outfile)
					except OSError, e:
						if e.errno != errno.EXDEV:
							raise
						if infile[0] == '/':
							source = infile
						else:
							raise
						os.symlink(source, outfile)
						if options.verbose:
							print "ln -s", pipes.quote(source), pipes.quote(outfile)
						with file(outfile) as f:
							pass
					linked += 1

	execute_tasks(tasks, map, options, directory_cache, linked)
	if options.delete or options.delete_sleep:
		to_delete = out_set - needed
		if options.verbose:
			print len(to_delete), "files to delete"
		for out in to_delete:
			f = os.path.join(options.target_dir, out[0] + out[1])
			if options.dryrun or not options.quiet:
				print "rm", f
			if options.delete_sleep:
				time.sleep(4)
			if not options.dryrun:
				os.remove(f)

def count_cpus():
	n = 0;
	with open("/proc/cpuinfo") as f:
		for l in f:
			if l.lower().startswith("processor"):
				n += 1
	return n
	
def read_list(suffixes):
	files = []
	for line in sys.stdin.readlines():
		f = line.strip().decode('utf-8')
		sep = os.path.splitext(f)
		if sep[1] in suffixes:
			files.append(sep)
	return files

def main(argv):
	transform = (
		(u".cr2", u".jpg", ["cr2-to-jpeg"]),
		(u".cr2.pp3", u".jpg", ["cr2-to-jpeg"]),
		(u".flac", u".ogg", ["oggenc", "--quiet", "--quality=5", "-o"]),
		(u".jpg", u".jpg", ["resize-jpeg", "--output"])
	)
	link = [ u".mp3", u".mov" ]
	
	parser = optparse.OptionParser(usage="usage: %prog [--help] [options] source_dir target_dir")
	parser.set_defaults(check_children=False)
	parser.disable_interspersed_args()	
	parser.add_option("-v", "--verbose", action="store_true", help="verbose messages")
	parser.add_option("-n", "--dryrun", action="store_true", help="dryrun")
	parser.add_option("-i", "--interactive", action="store_true", help="interactive mode")
	parser.add_option("-l", "--list", action="store_true", help="read list from stdin")
	parser.add_option("-D", "--delete", action="store_true", help="delete old files")
	parser.add_option("--max_filename_characters", type="int", default=40, metavar="length", help="maximum number characters of the file name to print [%default]")
	parser.add_option("-C", "--delete_sleep", action="store_true", help="delete old files after sleep")
	parser.add_option("-q", "--quiet", action="store_true", default=False, help="silence [%default]")
	parser.add_option("--check_children", action="store_true", dest="check_children", help="check all children are alive [%default]")
	parser.add_option("--no_check_children", action="store_false", dest="check_children", help="do not check all children are alive [%default]")
	parser.add_option("-p", "--tmp_prefix", default="#", help="prefix for temporary files [%default]")
	parser.add_option("-t", "--target_dir", default=None, help="target directory")
	parser.add_option("-s", "--source_dir", default=None, help="source directory")
	parser.add_option("--ncpus", default = count_cpus(), type='int', help="number of cpus to use [%default]")
	parser.add_option("--file_permissions", default = 0, type='int', help="files most have at least these permissions [%default]")
	parser.add_option("--directory_permissions", default = 0, type='int', help="directories most have at least these permissions [%default]")
	(options, args) = parser.parse_args()
			
	if options.ncpus <= 0:
		print >> sys.stderr, "must have at least 1 cpu"
		sys.exit(1)
		
	mapping = list(transform)
	for i in link:
		mapping.append((i, i, None))
	
	i = 0
	if options.source_dir == None:
		if i == len(args):
			parser.error("must supply an argument for source_dir")
			sys.exit(1)
		options.source_dir = args[i]
		i += 1
	if options.target_dir == None:
		if i == len(args):
			parser.error("must supply an argument for target_dir " + str(args))
			sys.exit(1)
		options.target_dir = args[i]
		i += 1
	if i != len(args):
		parser.error("too many arguments: " + str(args))
		sys.exit(1)
	
	input_suffixes = frozenset([f[0] for f in mapping])
	if options.list:
		in_files = read_list(input_suffixes)
	else:
		in_files = read_files(options.source_dir, input_suffixes, options, False)
		
	out_files = read_files(options.target_dir, set([f[1] for f in mapping]), options, True)
	
	if options.verbose:
		print "using", options.ncpus, "cpus"
		print len(in_files), "source files,", len(out_files), "target files"
	
	transformer(in_files, out_files, mapping, options)
	if options.interactive:
		print "hit return to exit ",
		sys.stdin.readline()
	sys.exit(0)
	
if __name__ == "__main__":
	try:
		main(sys.argv)
	except MyError, e:
		print >> sys.stderr, os.path.basename(sys.argv[0]) + ":", e.message.encode('utf-8')
		sys.exit(1)
