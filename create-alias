#!/usr/bin/python3
# create-alias Copyright (C) 2018-2019 Stuart Pook (http://www.pook.it/)
# Create a new email aliases or show all existing aliases
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
import argparse
import subprocess
import os
import tempfile
import logging
import shlex
import errno

def myname():
    return os.path.basename(sys.argv[0])

def add_alias(cmd, domain):
    logging.debug("run %s", ' '.join([shlex.quote(c) for c in cmd]))
    with subprocess.Popen(cmd, stdout=subprocess.PIPE, stdin=subprocess.DEVNULL) as p:
        for line in p.stdout:
            fields = line.split(':')
            print("%s@%s : %s" % fields[0].strip(), domain, fields[1].strip())
        sys.exit(p.wait())

def read_aliases(stream):
    return [ [ f.strip() for f in line.split(':') ] for line in stream ]

def download_aliases(cmd, domain, backup):
    logging.debug("run %s", ' '.join([shlex.quote(c) for c in cmd]))
    with subprocess.Popen(cmd, stdout=subprocess.PIPE, stdin=subprocess.DEVNULL, universal_newlines=True) as p:
        new_aliases = read_aliases(p.stdout)
        if p.wait() != 0:
            logging.fatal("%s failed" % ' '.join([shlex.quote(c) for c in cmd]))
            sys.exit(4)
        logging.debug("%d aliases exist", len(new_aliases))

    try:
        with open(backup) as p:
            old_aliases = read_aliases(p)
            logging.debug("%d aliases already saved", len(old_aliases))
    except FileNotFoundError:
        old_aliases = []
        logging.debug("no aliases saved")

    if old_aliases != new_aliases:
        logging.info("aliases have changed, updating %s", backup)
        with tempfile.NamedTemporaryFile(mode="w", dir=os.path.dirname(backup)) as tmp:
            for k, v in new_aliases:
                print(k, ":", v, file=tmp)
            tmp.flush()
            os.rename(tmp.name, backup)
            os.link(backup, tmp.name)

    try:
        for k, v in new_aliases:
            print("%s@%s : %s" % (k, domain, v))
    except IOError as e:
        if e.errno != errno.EPIPE:
            raise

def main():
    parser = argparse.ArgumentParser(allow_abbrev=False, description='add an alias or show them all',
            formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.set_defaults(loglevel='warn')
    parser.add_argument("-v", "--verbose", dest='loglevel', action="store_const", const='debug', help="debug loglevel")
    parser.add_argument("-l", "--loglevel", default='warn', metavar="LEVEL", help="set logging level")
    parser.add_argument("--sshoptions", default="Tnax", help="options for ssh")
    parser.add_argument("--machine", default="email-aliases", help="hostname for remote host")
    parser.add_argument("--domain", default="pook.it", help="domain to be appended to aliases")
    parser.add_argument("--backup",
            default=os.environ.get('CREATE_ALIAS_BACKUP', os.path.expanduser("~/var/email-aliases.cache")),
            metavar="FILE",
            help="file to backup aliases")
    parser.add_argument("alias", nargs='?', default=None, help="alias to add")

    args = parser.parse_args()
    logging.basicConfig(level=getattr(logging, args.loglevel.upper(), None))

    cmd = ['ssh', '-' + args.sshoptions, args.machine ]
    if args.alias:
        cmd.append(args.alias)
        add_alias(cmd, args.domain)
    else:
        download_aliases(cmd, args.domain, args.backup)

if __name__ == '__main__':
    main()
